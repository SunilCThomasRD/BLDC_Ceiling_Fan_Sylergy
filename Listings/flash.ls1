A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\flash.OBJ
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE .\Objects\flash.src PR(.\Listings\flash.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\Objects\flash.SRC generated from: src\flash.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil_v5\C51\BIN\C51.EXE src\flash.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECT
                             EXTEND PRINT(.\Listings\flash.lst) TABS(2) SRC(.\Objects\flash.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    FLASH
                       8     
  00C0                 9     I2C_INT_EN      BIT     0C0H.0
  0080                10     P0      DATA    080H
  0088                11     P1      DATA    088H
  0084                12     DBTSR   DATA    084H
  0090                13     P2      DATA    090H
  00D6                14     AC      BIT     0D0H.6
  00BF                15     EA      BIT     0B8H.7
  008E                16     WDTCR   DATA    08EH
  009E                17     P0DB    DATA    09EH
  00D7                18     CMPTR   DATA    0D7H
  00D3                19     TDISR   DATA    0D3H
  00A6                20     P1DB    DATA    0A6H
  00C8                21     ADC_INT_EN      BIT     0C8H.0
  00C1                22     UART_RX_INT_EN  BIT     0C0H.1
  00AE                23     P2DB    DATA    0AEH
  00D2                24     TESTH   DATA    0D2H
  00C2                25     UART_TX_INT_EN  BIT     0C0H.2
  00D1                26     TESTL   DATA    0D1H
  00B8                27     IE      DATA    0B8H
  0083                28     DPH1    DATA    083H
  008D                29     WDTMR   DATA    08DH
  0082                30     DPL1    DATA    082H
  00E4                31     USTAT   DATA    0E4H
  008A                32     IOFFSET DATA    08AH
  00A2                33     EO      DATA    0A2H
  009D                34     P0OD    DATA    09DH
  00A5                35     P1OD    DATA    0A5H
  00AD                36     P2OD    DATA    0ADH
  0095                37     ADCM    DATA    095H
  00E8                38     IP      DATA    0E8H
  009B                39     P0IO    DATA    09BH
  00A3                40     P1IO    DATA    0A3H
  0092                41     T0CR    DATA    092H
  00BA                42     T1CR    DATA    0BAH
  00AB                43     P2IO    DATA    0ABH
  0096                44     ADCR    DATA    096H
  0094                45     T0DR    DATA    094H
  00D7                46     CY      BIT     0D0H.7
  00C2                47     T2CR    DATA    0C2H
  00A0                48     IRQ0    DATA    0A0H
  00A8                49     IRQ1    DATA    0A8H
  00B0                50     IRQ2    DATA    0B0H
  00CA                51     BIT_INT_EN      BIT     0C8H.2
  00F2                52     FECR    DATA    0F2H
  00B8                53     CMP_INT_EN      BIT     0B8H.0
  00EF                54     FEDR    DATA    0EFH
  0081                55     SP      DATA    081H
  00A4                56     EINT_INT_F      BIT     0A0H.4
  00D2                57     OV      BIT     0D0H.2
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     2

  00FE                58     I2CSAR  DATA    0FEH
  00BD                59     T1ADRH  DATA    0BDH
  009C                60     P0PU    DATA    09CH
  00C5                61     T2ADRH  DATA    0C5H
  00BF                62     T1BDRH  DATA    0BFH
  00A4                63     P1PU    DATA    0A4H
  00CD                64     T1CDRH  DATA    0CDH
  00C7                65     T2BDRH  DATA    0C7H
  00AC                66     P2PU    DATA    0ACH
  00CF                67     T1DDRH  DATA    0CFH
  00C9                68     EIFLAG  DATA    0C9H
  00BC                69     T1ADRL  DATA    0BCH
  00F1                70     FEMR    DATA    0F1H
  00C4                71     T2ADRL  DATA    0C4H
  00BE                72     T1BDRL  DATA    0BEH
  008B                73     EIPOL0  DATA    08BH
  00EC                74     FPCR    DATA    0ECH
  00D9                75     SCCR    DATA    0D9H
  00CC                76     T1CDRL  DATA    0CCH
  00CB                77     LVI_INT_EN      BIT     0C8H.3
  00C6                78     T2BDRL  DATA    0C6H
  008C                79     EIPOL1  DATA    08CH
  00CE                80     T1DDRL  DATA    0CEH
  00C9                81     WDT_INT_EN      BIT     0C8H.1
  0080                82     P00     BIT     080H.0
  00F3                83     FESR    DATA    0F3H
  00A8                84     I2C_INT_F       BIT     0A8H.0
  00A1                85     EIN10_INT_F     BIT     0A0H.1
  0088                86     P10     BIT     088H.0
  0087                87     PCON    DATA    087H
  0081                88     P01     BIT     080H.1
  00E7                89     FETR    DATA    0E7H
  00A2                90     EIN11_INT_F     BIT     0A0H.2
  0090                91     P20     BIT     090H.0
  0089                92     P11     BIT     088H.1
  0082                93     P02     BIT     080H.2
  00A3                94     EIN12_INT_F     BIT     0A0H.3
  0091                95     P21     BIT     090H.1
  008A                96     P12     BIT     088H.2
  0083                97     P03     BIT     080H.3
  0092                98     P22     BIT     090H.2
  008B                99     P13     BIT     088H.3
  0084               100     P04     BIT     080H.4
  00B4               101     P0FSRH  DATA    0B4H
  0093               102     P23     BIT     090H.3
  008C               103     P14     BIT     088H.4
  0085               104     P05     BIT     080H.5
  00B6               105     P1FSRH  DATA    0B6H
  008D               106     P15     BIT     088H.5
  0086               107     P06     BIT     080H.6
  0087               108     P07     BIT     080H.7
  009A               109     ILVL    DATA    09AH
  00B3               110     P0FSRL  DATA    0B3H
  00B5               111     P1FSRL  DATA    0B5H
  00B0               112     ADC_INT_F       BIT     0B0H.0
  00A9               113     UART_RX_INT_F   BIT     0A8H.1
  00DE               114     CMPDBT  DATA    0DEH
  00FB               115     I2CSCLHR        DATA    0FBH
  00E1               116     UCTRL1  DATA    0E1H
  00AA               117     UART_TX_INT_F   BIT     0A8H.2
  00E2               118     UCTRL2  DATA    0E2H
  0098               119     RSFR    DATA    098H
  0089               120     LVIR    DATA    089H
  00E3               121     UCTRL3  DATA    0E3H
  00C0               122     IE1     DATA    0C0H
  00EB               123     UCTRL4  DATA    0EBH
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     3

  00C8               124     IE2     DATA    0C8H
  00FA               125     I2CSCLLR        DATA    0FAH
  00F0               126     B       DATA    0F0H
  00D1               127     TEST    DATA    0D1H
  008E               128     WDTR    DATA    08EH
  00C4               129     T0_INT_EN       BIT     0C0H.4
  00C5               130     T1_INT_EN       BIT     0C0H.5
  00C6               131     T2_INT_EN       BIT     0C0H.6
  0085               132     BITCNT  DATA    085H
  00E0               133     ACC     DATA    0E0H
  0096               134     ADCM1   DATA    096H
  00E9               135     IP1     DATA    0E9H
  00EA               136     IP2     DATA    0EAH
  00D0               137     P       BIT     0D0H.0
  00B2               138     BIT_INT_F       BIT     0B0H.2
  00B9               139     EINT10_INT_EN   BIT     0B8H.1
  00A0               140     CMP_INT_F       BIT     0A0H.0
  00BA               141     EINT11_INT_EN   BIT     0B8H.2
  00FD               142     I2CDR   DATA    0FDH
  00D3               143     RS0     BIT     0D0H.3
  00BB               144     EINT12_INT_EN   BIT     0B8H.3
  008F               145     SYSCON_AR       DATA    08FH
  00D4               146     RS1     BIT     0D0H.4
  00FF               147     I2CSAR1 DATA    0FFH
  0083               148     DPH     DATA    083H
  00BC               149     T1ADR   DATA    0BCH
  00F9               150     I2CMR   DATA    0F9H
  00C4               151     T2ADR   DATA    0C4H
  00BE               152     T1BDR   DATA    0BEH
  00B3               153     LVI_INT_F       BIT     0B0H.3
  0094               154     T0CDR   DATA    094H
  00CC               155     T1CDR   DATA    0CCH
  00C6               156     T2BDR   DATA    0C6H
  00CE               157     T1DDR   DATA    0CEH
  0082               158     DPL     DATA    082H
  00B1               159     WDT_INT_F       BIT     0B0H.1
  00BB               160     T1CRH   DATA    0BBH
  0097               161     ADCRH   DATA    097H
  00F8               162     I2CSR   DATA    0F8H
  00C3               163     T2CRH   DATA    0C3H
  00F7               164     FEARH   DATA    0F7H
  00BA               165     T1CRL   DATA    0BAH
  0096               166     ADCRL   DATA    096H
  00C2               167     T2CRL   DATA    0C2H
  00B2               168     CMX     DATA    0B2H
  00D4               169     DMY_REFA        DATA    0D4H
  0093               170     T0CNT   DATA    093H
  00F5               171     FEARL   DATA    0F5H
  00D5               172     DMY_REFB        DATA    0D5H
  0082               173     DPTR0   DATA    082H
  00F6               174     FEARM   DATA    0F6H
  00B3               175     P0FSR   DATA    0B3H
  0082               176     DPTR1   DATA    082H
  00B5               177     P1FSR   DATA    0B5H
  00B7               178     P2FSR   DATA    0B7H
  00E6               179     UDATA   DATA    0E6H
  00FC               180     I2CSDHR DATA    0FCH
  00BC               181     EINT_INT_EN     BIT     0B8H.4
  00E5               182     UBAUD   DATA    0E5H
  00F4               183     FETCR   DATA    0F4H
  00DF               184     XBANK   DATA    0DFH
  00D5               185     F0      BIT     0D0H.5
  00AA               186     LDOCR   DATA    0AAH
  0086               187     BITCR   DATA    086H
  00D6               188     CMPCR   DATA    0D6H
  00D1               189     F1      BIT     0D0H.1
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     4

  00AC               190     T0_INT_F        BIT     0A8H.4
  00AD               191     T1_INT_F        BIT     0A8H.5
  00AE               192     T2_INT_F        BIT     0A8H.6
  00D0               193     PSW     DATA    0D0H
  00D8               194     OSCCR   DATA    0D8H
                     195     ?PR?write_page_buffer_src?FLASH          SEGMENT CODE 
                     196     ?PR?do_flash_at_sram_src?FLASH           SEGMENT CODE 
                     197     ?PR?Flash_Enter?FLASH                    SEGMENT CODE 
                     198     ?PR?Flash_Exit?FLASH SEGMENT CODE 
                     199     ?PR?_write_page_buffer?FLASH             SEGMENT CODE 
                     200     ?XD?_write_page_buffer?FLASH             SEGMENT XDATA OVERLAYABLE 
                     201     ?PR?do_flash_at_sram?FLASH               SEGMENT CODE 
                     202     ?XD?do_flash_at_sram?FLASH               SEGMENT XDATA OVERLAYABLE 
                     203     ?PR?_Flash_Erase?FLASH                   SEGMENT CODE 
                     204     ?XD?_Flash_Erase?FLASH                   SEGMENT XDATA OVERLAYABLE 
                     205     ?PR?_Flash_Write?FLASH                   SEGMENT CODE 
                     206     ?XD?_Flash_Write?FLASH                   SEGMENT XDATA OVERLAYABLE 
                     207     ?PR?_Flash_Read?FLASH                    SEGMENT CODE 
                     208     ?XD?_Flash_Read?FLASH                    SEGMENT XDATA OVERLAYABLE 
                     209     ?DT?FLASH            SEGMENT DATA 
                     210             EXTRN   CODE (?C?CLDPTR)
                     211             EXTRN   CODE (?C?CSTPTR)
                     212             PUBLIC  g_FEMR
                     213             PUBLIC  g_FECR
                     214             PUBLIC  g_WDTMR
                     215             PUBLIC  g_IE
                     216             PUBLIC  code_buf
                     217             PUBLIC  g_IE2
                     218             PUBLIC  g_IE1
                     219             PUBLIC  ?_Flash_Read?BYTE
                     220             PUBLIC  _Flash_Read
                     221             PUBLIC  _Flash_Write
                     222             PUBLIC  _Flash_Erase
                     223             PUBLIC  do_flash_at_sram
                     224             PUBLIC  _write_page_buffer
                     225             PUBLIC  Flash_Exit
                     226             PUBLIC  Flash_Enter
                     227             PUBLIC  do_flash_at_sram_src
                     228             PUBLIC  write_page_buffer_src
                     229     
----                 230             DSEG  AT  030H
0030                 231            code_buf:   DS   20
                     232     
----                 233             RSEG  ?XD?_write_page_buffer?FLASH
0000                 234     ?_write_page_buffer?BYTE:
0000                 235            temp?441:   DS   3
                     236     
----                 237             RSEG  ?XD?do_flash_at_sram?FLASH
0000                 238     ?do_flash_at_sram?BYTE:
0000                 239            temp?543:   DS   1
                     240     
----                 241             RSEG  ?XD?_Flash_Erase?FLASH
0000                 242     ?_Flash_Erase?BYTE:
0000                 243            addr?645:   DS   2
                     244     
----                 245             RSEG  ?XD?_Flash_Read?FLASH
0000                 246     ?_Flash_Read?BYTE:
0000                 247            addr?853:   DS   2
0002                 248              dt?854:   DS   3
0005                 249             ORG  5
0005                 250          length?855:   DS   1
0006                 251             ORG  6
0006                 252               i?856:   DS   2
                     253     
----                 254             RSEG  ?XD?_Flash_Write?FLASH
0000                 255     ?_Flash_Write?BYTE:
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     5

0000                 256            addr?748:   DS   2
0002                 257             ORG  2
0002                 258              dt?749:   DS   3
0005                 259             ORG  5
0005                 260               i?750:   DS   2
0007                 261             ORG  7
0007                 262     flash_state_id?752:   DS   1
                     263     
----                 264             RSEG  ?DT?FLASH
0000                 265               g_IE1:   DS   1
0001                 266               g_IE2:   DS   1
0002                 267                g_IE:   DS   1
0003                 268             g_WDTMR:   DS   1
0004                 269              g_FECR:   DS   1
0005                 270              g_FEMR:   DS   1
                     271     ; #define FLASH_GLOBALS
                     272     ; 
                     273     ; #define               MyDef   extern
                     274     ; 
                     275     ; 
                     276     ; #include      "A94B114.h"
                     277     ; #include "flash.h"
                     278     ; #include      "func_def.h"
                     279     ; 
                     280     ; #define PGM_TIME 0x9D // 2.5ms
                     281     ; #define NOP _nop_()
                     282     ; 
                     283     ; #define PAGEBUF_SIZE 32
                     284     ; #define coderom ((unsigned char volatile code  *) 0)
                     285     ; #define DUMMY_FLASH_ADDRESS   0x600                   // Set a dummy write area within th
                             e protection zone.
                     286     ; 
                     287     ; #define       FLASH_WRITE_SECURITY_ID         0xF0
                     288     ; #define       FLASH_ERASE_SECURITY_ID         0xE0
                     289     ; 
                     290     ; // Do not change this define.
                     291     ; // code_buf, g_FEMR, g_FECR, g_WDTMR must be data area. (Do not define at xdata area or i
                             data.)
                     292     ; volatile unsigned char data code_buf[20] _at_ 0x30;           // Lower 128bytes internal 
                             RAM. (GPR Address 0x30~0x7F)
                     293     ; volatile unsigned char data g_FEMR, g_FECR, g_WDTMR;
                     294     ; volatile unsigned char data g_IE, g_IE1, g_IE2;
                     295     ; //==============================================================================
                     296     ; // Sram-jump Program Routine.
                     297     ; //==============================================================================
                     298     ; // must execute in SRAM!, 0 ~ 0x11(code size : 18 byte)
                     299     ; // Do not change this routine.
                     300     ; volatile void write_page_buffer_src()         
                     301     
----                 302             RSEG  ?PR?write_page_buffer_src?FLASH
0000                 303     write_page_buffer_src:
                     304             USING   0
                     305                             ; SOURCE LINE # 30
                     306     ; {
                     307                             ; SOURCE LINE # 31
                     308     ;     FEMR = FLASH_SEL                |   // FSEL (Select Flash memory)
                     309                             ; SOURCE LINE # 32
0000 75F189          310             MOV     FEMR,#089H
                     311     ;            FLASH_PBUFF_SEL          |   // PBUFF (Select page buffer)
                     312     ;            FLASH_CON_ENABLE         ;   // FEEN (Enable program & erase)
                     313     ; 
                     314     ;       #pragma asm
                     315     ;               mov             r0,#32
0003 7820            316               mov           r0,#32
                     317     ;               mov             dptr,#0x10E0    ; page buffer address
0005 9010E0          318               mov           dptr,#0x10E0    ; page buffer address
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     6

                     319     ;     write_page_buffer_src_loop:
0008                 320               write_page_buffer_src_loop:
                     321     ;               mov             a, @r1
0008 E7              322               mov           a, @r1
                     323     ;               movx    @dptr,a
0009 F0              324               movx  @dptr,a
                     325     ;               inc             r1
000A 09              326               inc           r1
                     327     ;               inc             dptr        
000B A3              328               inc           dptr        
                     329     ;               djnz    r0,write_page_buffer_src_loop
000C D8FA            330               djnz  r0,write_page_buffer_src_loop
                     331     ;       #pragma endasm
                     332     ; 
                     333     ;     FEMR = 0;
                     334                             ; SOURCE LINE # 47
000E E4              335             CLR     A
000F F5F1            336             MOV     FEMR,A
                     337     ; }
                     338                             ; SOURCE LINE # 48
0011 22              339             RET     
                     340     ; END OF write_page_buffer_src
                     341     
                     342     ; 
                     343     ; // must execute in SRAM!, 0 ~ 0x0E(code size : 15 byte)
                     344     ; // Do not change this routine.
                     345     ; volatile void do_flash_at_sram_src()          
                     346     
----                 347             RSEG  ?PR?do_flash_at_sram_src?FLASH
0000                 348     do_flash_at_sram_src:
                     349             USING   0
                     350                             ; SOURCE LINE # 52
                     351     ; {
                     352                             ; SOURCE LINE # 53
                     353     ;       #pragma asm
                     354     ;               mov     FEMR,g_FEMR                             // 3 byte
0000 8500F1   F      355               mov   FEMR,g_FEMR                              
                     356     ;               mov     FECR,g_FECR                             // 3 byte
0003 8500F2   F      357               mov   FECR,g_FECR                              
                     358     ;       _flash_busy_wait:
0006                 359               _flash_busy_wait:
                     360     ;               mov     A,FESR                                  // 2 byte
0006 E5F3            361               mov   A,FESR                                   
                     362     ;               JNB     ACC.7,_flash_busy_wait  // 3 byte
0008 30E7FB          363               JNB   ACC.7,_flash_busy_wait   
                     364     ;               clr     A                                               // 1 byte
000B E4              365               clr   A                                                
                     366     ;               mov     FEMR,A                                  // 2 byte
000C F5F1            367               mov   FEMR,A                                   
                     368     ;       #pragma endasm
                     369     ; // C source
                     370     ; //     FEMR = g_FEMR;
                     371     ; //     FECR = g_FECR;
                     372     ; //     while( !(FESR & 0x80) );
                     373     ; //     FEMR = 0;
                     374     ; }     // RET // 1byte
                     375                             ; SOURCE LINE # 68
000E 22              376             RET     
                     377     ; END OF do_flash_at_sram_src
                     378     
                     379     ; //==============================================================================
                     380     ; void Flash_Enter()
                     381     
----                 382             RSEG  ?PR?Flash_Enter?FLASH
0000                 383     Flash_Enter:
                     384                             ; SOURCE LINE # 70
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     7

                     385     ; {
                     386                             ; SOURCE LINE # 71
                     387     ;       cli();                          // Global Interrupt Disable
                     388                             ; SOURCE LINE # 72
0000 C2BF            389             CLR     EA
                     390     ;       g_IE = IE;
                     391                             ; SOURCE LINE # 73
0002 85B800   F      392             MOV     g_IE,IE
                     393     ;       g_IE1 = IE1;
                     394                             ; SOURCE LINE # 74
0005 85C000   F      395             MOV     g_IE1,IE1
                     396     ;       g_IE2 = IE2; 
                     397                             ; SOURCE LINE # 75
0008 85C800   F      398             MOV     g_IE2,IE2
                     399     ; //    g_WDTMR = WDTMR;        // Backup WDTMR
                     400     ;       WDTMR   = 0;            // Watch Dog Timer Stop.
                     401                             ; SOURCE LINE # 77
000B E4              402             CLR     A
000C F58D            403             MOV     WDTMR,A
                     404     ; //    g_WDTMR |= 0x04;        // Clear WDT Counter
                     405     ;       
                     406     ;       // To access Flash Control register, ENTRY_0~2 should be set 0xAA, 0x55, 0xA5.
                     407     ;       *(unsigned char xdata *)0x10D8 = 0xAA;
                     408                             ; SOURCE LINE # 81
000E 9010D8          409             MOV     DPTR,#010D8H
0011 74AA            410             MOV     A,#0AAH
0013 F0              411             MOVX    @DPTR,A
                     412     ;     *(unsigned char xdata *)0x10DA = 0x55;
                     413                             ; SOURCE LINE # 82
0014 9010DA          414             MOV     DPTR,#010DAH
0017 7455            415             MOV     A,#055H
0019 F0              416             MOVX    @DPTR,A
                     417     ;     *(unsigned char xdata *)0x10DD = 0xA5;
                     418                             ; SOURCE LINE # 83
001A 9010DD          419             MOV     DPTR,#010DDH
001D 74A5            420             MOV     A,#0A5H
001F F0              421             MOVX    @DPTR,A
                     422     ;       
                     423     ;       FEARL = (unsigned char)( DUMMY_FLASH_ADDRESS & 0xff);
                     424                             ; SOURCE LINE # 85
0020 E4              425             CLR     A
0021 F5F5            426             MOV     FEARL,A
                     427     ;       FEARM = (unsigned char)(( DUMMY_FLASH_ADDRESS >> 8) & 0xff);
                     428                             ; SOURCE LINE # 86
0023 75F606          429             MOV     FEARM,#06H
                     430     ;       FEARH = 0;
                     431                             ; SOURCE LINE # 87
0026 F5F7            432             MOV     FEARH,A
                     433     ;       
                     434     ; }
                     435                             ; SOURCE LINE # 89
0028 22              436             RET     
                     437     ; END OF Flash_Enter
                     438     
                     439     ; 
                     440     ; void Flash_Exit()
                     441     
----                 442             RSEG  ?PR?Flash_Exit?FLASH
0000                 443     Flash_Exit:
                     444             USING   0
                     445                             ; SOURCE LINE # 91
                     446     ; {
                     447                             ; SOURCE LINE # 92
                     448     ;       FECR = FLASH_MODE_EXIT;
                     449                             ; SOURCE LINE # 93
0000 75F233          450             MOV     FECR,#033H
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     8

                     451     ;       
                     452     ;       FEARL = (unsigned char)( DUMMY_FLASH_ADDRESS & 0xff);
                     453                             ; SOURCE LINE # 95
0003 E4              454             CLR     A
0004 F5F5            455             MOV     FEARL,A
                     456     ;       FEARM = (unsigned char)(( DUMMY_FLASH_ADDRESS >> 8) & 0xff);
                     457                             ; SOURCE LINE # 96
0006 75F606          458             MOV     FEARM,#06H
                     459     ;       FEARH = 0;
                     460                             ; SOURCE LINE # 97
0009 F5F7            461             MOV     FEARH,A
                     462     ;       
                     463     ;       // After to change Flash Control register, ENTRY_0~2 should be set 0x00.
                     464     ;       *(unsigned char xdata *)0x10D8 = 0x00;
                     465                             ; SOURCE LINE # 100
000B 9010D8          466             MOV     DPTR,#010D8H
000E F0              467             MOVX    @DPTR,A
                     468     ;     *(unsigned char xdata *)0x10DA = 0x00;
                     469                             ; SOURCE LINE # 101
000F 9010DA          470             MOV     DPTR,#010DAH
0012 F0              471             MOVX    @DPTR,A
                     472     ;     *(unsigned char xdata *)0x10DD = 0x00;
                     473                             ; SOURCE LINE # 102
0013 9010DD          474             MOV     DPTR,#010DDH
0016 F0              475             MOVX    @DPTR,A
                     476     ;       
                     477     ;       // Flash code buffer ram clear.
                     478     ; #pragma asm
                     479     ;       mov             r0, #code_buf
0017 7830            480               mov           r0, #code_buf
                     481     ;       mov             r2, #20
0019 7A14            482               mov           r2, #20
                     483     ;       clr             a
001B E4              484               clr           a
                     485     ; loop0:
001C                 486               loop0:
                     487     ;       mov             @r0, a
001C F6              488               mov           @r0, a
                     489     ;       inc             r0
001D 08              490               inc           r0
                     491     ;       djnz    r2, loop0
001E DAFC            492               djnz  r2, loop0
                     493     ; #pragma endasm
                     494     ; 
                     495     ; //    WDTMR   = g_WDTMR;      // Restore WDTMR
                     496     ;        IE = g_IE;
                     497                             ; SOURCE LINE # 116
0020 8500B8   F      498             MOV     IE,g_IE
                     499     ;       IE1 = g_IE1;
                     500                             ; SOURCE LINE # 117
0023 8500C0   F      501             MOV     IE1,g_IE1
                     502     ;       IE2 = g_IE2; 
                     503                             ; SOURCE LINE # 118
0026 8500C8   F      504             MOV     IE2,g_IE2
                     505     ;       sei();                          // Global Interrupt Enable
                     506                             ; SOURCE LINE # 119
0029 D2BF            507             SETB    EA
                     508     ; }
                     509                             ; SOURCE LINE # 120
002B 22              510             RET     
                     511     ; END OF Flash_Exit
                     512     
                     513     ; 
                     514     ; 
                     515     ; void write_page_buffer(unsigned char *dt)     // dt -> r3, r2, r1     
                     516     
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE     9

----                 517             RSEG  ?PR?_write_page_buffer?FLASH
0000                 518     _write_page_buffer:
                     519             USING   0
                     520                             ; SOURCE LINE # 123
                     521     ;---- Variable 'dt?440' assigned to Register 'R1/R2/R3' ----
                     522     ; {
                     523                             ; SOURCE LINE # 124
                     524     ;       unsigned char *temp = dt;
                     525                             ; SOURCE LINE # 125
0000 900000   F      526             MOV     DPTR,#temp?441
0003 EB              527             MOV     A,R3
0004 F0              528             MOVX    @DPTR,A
0005 A3              529             INC     DPTR
0006 EA              530             MOV     A,R2
0007 F0              531             MOVX    @DPTR,A
0008 A3              532             INC     DPTR
0009 E9              533             MOV     A,R1
000A F0              534             MOVX    @DPTR,A
                     535     ;       
                     536     ;     #pragma asm
                     537     ;               mov             dptr,#write_page_buffer_src
000B 900000   F      538               mov           dptr,#write_page_buffer_src
                     539     ;               mov             r0,#0x30
000E 7830            540               mov           r0,#0x30
                     541     ;         mov           r2,#0x12
0010 7A12            542               mov           r2,#0x12
                     543     ;       write_page_buffer_loop:
0012                 544               write_page_buffer_loop:
                     545     ;               clr             a
0012 E4              546               clr           a
                     547     ;               movc    a,@a+dptr
0013 93              548               movc  a,@a+dptr
                     549     ;               mov             @r0,a
0014 F6              550               mov           @r0,a
                     551     ;               inc             dptr
0015 A3              552               inc           dptr
                     553     ;               inc             r0
0016 08              554               inc           r0
                     555     ;               djnz    r2,write_page_buffer_loop
0017 DAF9            556               djnz  r2,write_page_buffer_loop
                     557     ;         ljmp  0x8030          ; jump sram region
0019 028030          558               ljmp  0x8030          ; jump sram region
                     559     ;     #pragma endasm
                     560     ; }
                     561                             ; SOURCE LINE # 140
001C 22              562             RET     
                     563     ; END OF _write_page_buffer
                     564     
                     565     ; 
                     566     ; #if 0
                     567     ; void do_flash_at_sram()
                     568     ; {
                     569     ;     #pragma asm
                     570     ;               mov             dptr,#do_flash_at_sram_src
                     571     ;               mov             r0,#0x30
                     572     ;               mov             r1,#0x0F
                     573     ;       do_flash_at_sram_loop:
                     574     ;               clr             a
                     575     ;               movc    a,@a+dptr
                     576     ;               mov             @r0,a
                     577     ;               inc             dptr
                     578     ;               inc             r0
                     579     ;               djnz    r1,do_flash_at_sram_loop
                     580     ;               ljmp    0x8030
                     581     ;     #pragma endasm
                     582     ; }
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    10

                     583     ; #else
                     584     ; void do_flash_at_sram()
                     585     
----                 586             RSEG  ?PR?do_flash_at_sram?FLASH
0000                 587     do_flash_at_sram:
                     588             USING   0
                     589                             ; SOURCE LINE # 160
                     590     ; {
                     591                             ; SOURCE LINE # 161
                     592     ;       unsigned char code *ptr;                //need to add "code"
                     593     ;       unsigned char temp=0, i;
                     594                             ; SOURCE LINE # 163
0000 E4              595             CLR     A
0001 900000   F      596             MOV     DPTR,#temp?543
0004 F0              597             MOVX    @DPTR,A
                     598     ; 
                     599     ;       ptr=(unsigned char code*)do_flash_at_sram_src;
                     600                             ; SOURCE LINE # 165
0005 7E00     F      601             MOV     R6,#HIGH (do_flash_at_sram_src)
0007 7F00     F      602             MOV     R7,#LOW (do_flash_at_sram_src)
                     603     ;---- Variable 'ptr?542' assigned to Register 'R6/R7' ----
                     604     ;       //temp=sizeof(int);
                     605     ;       for(i=0; i<15;i++)      //**size of "do_flash_at_sram_src" is less than 32.
                     606                             ; SOURCE LINE # 167
                     607     ;---- Variable 'i?544' assigned to Register 'R5' ----
0009 FD              608             MOV     R5,A
000A                 609     ?C0006:
000A ED              610             MOV     A,R5
000B C3              611             CLR     C
000C 940F            612             SUBB    A,#0FH
000E 7480            613             MOV     A,#080H
0010 9480            614             SUBB    A,#080H
0012 5014            615             JNC     ?C0007
                     616     ;       {
                     617                             ; SOURCE LINE # 168
                     618     ;               code_buf[i]=ptr[i];
                     619                             ; SOURCE LINE # 169
0014 EF              620             MOV     A,R7
0015 2D              621             ADD     A,R5
0016 F582            622             MOV     DPL,A
0018 E4              623             CLR     A
0019 3E              624             ADDC    A,R6
001A F583            625             MOV     DPH,A
001C E4              626             CLR     A
001D 93              627             MOVC    A,@A+DPTR
001E FC              628             MOV     R4,A
001F 7430            629             MOV     A,#LOW (code_buf)
0021 2D              630             ADD     A,R5
0022 F8              631             MOV     R0,A
0023 A604            632             MOV     @R0,AR4
                     633     ;       }
                     634                             ; SOURCE LINE # 170
0025 0D              635             INC     R5
0026 80E2            636             SJMP    ?C0006
0028                 637     ?C0007:
                     638     ; //    ljmp_code_buf();                //Jump 0x8030
                     639     ;       #pragma asm
                     640     ;               ljmp    0x8030          ;FLASH Writing Start
0028 028030          641               ljmp  0x8030          ;FLASH Writing Start
                     642     ;       #pragma endasm
                     643     ;       
                     644     ; }
                     645                             ; SOURCE LINE # 176
002B 22              646             RET     
                     647     ; END OF do_flash_at_sram
                     648     
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    11

                     649     ; #endif
                     650     ; char Flash_Erase(unsigned int addr)
                     651     
----                 652             RSEG  ?PR?_Flash_Erase?FLASH
0000                 653     _Flash_Erase:
                     654             USING   0
                     655                             ; SOURCE LINE # 178
0000 900000   F      656             MOV     DPTR,#addr?645
0003 EE              657             MOV     A,R6
0004 F0              658             MOVX    @DPTR,A
0005 A3              659             INC     DPTR
0006 EF              660             MOV     A,R7
0007 F0              661             MOVX    @DPTR,A
                     662     ; {
                     663                             ; SOURCE LINE # 179
                     664     ;       unsigned int i;
                     665     ;       unsigned char flash_state_id = FLASH_ERASE_SECURITY_ID;
                     666                             ; SOURCE LINE # 181
                     667     ;---- Variable 'flash_state_id?647' assigned to Register 'R5' ----
0008 7DE0            668             MOV     R5,#0E0H
                     669     ;       
                     670     ;       // Flash Flash Control Register CLR change before initialization.
                     671     ;       FECR    = 0;
                     672                             ; SOURCE LINE # 184
000A E4              673             CLR     A
000B F5F2            674             MOV     FECR,A
                     675     ;       FETCR   = 0;
                     676                             ; SOURCE LINE # 185
000D F5F4            677             MOV     FETCR,A
                     678     ;       FEMR    = 0; 
                     679                             ; SOURCE LINE # 186
000F F5F1            680             MOV     FEMR,A
                     681     ;       
                     682     ;       // Enable program mode
                     683     ;       Flash_Enter();
                     684                             ; SOURCE LINE # 189
0011 120000   F      685             LCALL   Flash_Enter
                     686     ; 
                     687     ;       FETCR = PGM_TIME;                               // 0x9D = 157 : (157+1) * 2 (31.25n
                             s * 256) = 2.528ms
                     688                             ; SOURCE LINE # 191
0014 75F49D          689             MOV     FETCR,#09DH
                     690     ;       FECR = FLASH_PBUFF_RESET;
                     691                             ; SOURCE LINE # 192
0017 75F202          692             MOV     FECR,#02H
                     693     ; 
                     694     ;       g_FEMR = FLASH_SEL                              |
                     695                             ; SOURCE LINE # 194
001A 750091   F      696             MOV     g_FEMR,#091H
                     697     ;                  FLASH_ERASE_MODE             |
                     698     ;                  FLASH_CON_ENABLE             ;
                     699     ; 
                     700     ;       g_FECR = FLASH_START_ERASE_PGM  ;
                     701                             ; SOURCE LINE # 198
001D 75000B   F      702             MOV     g_FECR,#0BH
                     703     ;       
                     704     ;       FEARL = (unsigned char)(addr&0xff);
                     705                             ; SOURCE LINE # 200
0020 900000   F      706             MOV     DPTR,#addr?645
0023 E0              707             MOVX    A,@DPTR
0024 FE              708             MOV     R6,A
0025 A3              709             INC     DPTR
0026 E0              710             MOVX    A,@DPTR
0027 F5F5            711             MOV     FEARL,A
                     712     ;       FEARM = (unsigned char)((addr>>8)&0xff);
                     713                             ; SOURCE LINE # 201
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    12

0029 EE              714             MOV     A,R6
002A F5F6            715             MOV     FEARM,A
                     716     ;       FEARH = 0;
                     717                             ; SOURCE LINE # 202
002C E4              718             CLR     A
002D F5F7            719             MOV     FEARH,A
                     720     ;       
                     721     ;       if(flash_state_id != FLASH_ERASE_SECURITY_ID)
                     722                             ; SOURCE LINE # 204
002F 74E0            723             MOV     A,#0E0H
0031 64E0            724             XRL     A,#0E0H
0033 6009            725             JZ      ?C0010
                     726     ;       {
                     727                             ; SOURCE LINE # 205
                     728     ;               Flash_Exit();
                     729                             ; SOURCE LINE # 206
0035 120000   F      730             LCALL   Flash_Exit
                     731     ;               WDTMR = 0;                      // If Flash ID fail, may be WDTMR value err
                             or.
                     732                             ; SOURCE LINE # 207
0038 E4              733             CLR     A
0039 F58D            734             MOV     WDTMR,A
                     735     ;               
                     736     ;               return -1;
                     737                             ; SOURCE LINE # 209
003B 7FFF            738             MOV     R7,#0FFH
003D 22              739             RET     
                     740     ;       }
                     741                             ; SOURCE LINE # 210
003E                 742     ?C0010:
                     743     ;       
                     744     ;       do_flash_at_sram();
                     745                             ; SOURCE LINE # 212
003E 120000   F      746             LCALL   do_flash_at_sram
                     747     ;  
                     748     ;       Flash_Exit();
                     749                             ; SOURCE LINE # 214
0041 120000   F      750             LCALL   Flash_Exit
                     751     ;       
                     752     ;       // read data  
                     753     ;       for(i=0; i<PAGEBUF_SIZE;i++){   // Read flash data.
                     754                             ; SOURCE LINE # 217
                     755     ;---- Variable 'i?646' assigned to Register 'R6/R7' ----
0044 E4              756             CLR     A
0045 FF              757             MOV     R7,A
0046 FE              758             MOV     R6,A
0047                 759     ?C0012:
                     760     ;               if(coderom[addr] != 0x00) 
                     761                             ; SOURCE LINE # 218
0047 900000   F      762             MOV     DPTR,#addr?645
004A E0              763             MOVX    A,@DPTR
004B FC              764             MOV     R4,A
004C A3              765             INC     DPTR
004D E0              766             MOVX    A,@DPTR
004E F582            767             MOV     DPL,A
0050 8C83            768             MOV     DPH,R4
0052 E4              769             CLR     A
0053 93              770             MOVC    A,@A+DPTR
0054 6003            771             JZ      ?C0015
                     772     ;                       return -1;
                     773                             ; SOURCE LINE # 219
0056 7FFF            774             MOV     R7,#0FFH
0058 22              775             RET     
0059                 776     ?C0015:
                     777     ; 
                     778     ;               addr++;
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    13

                     779                             ; SOURCE LINE # 221
0059 900000   F      780             MOV     DPTR,#addr?645+01H
005C E0              781             MOVX    A,@DPTR
005D 04              782             INC     A
005E F0              783             MOVX    @DPTR,A
005F 7006            784             JNZ     ?C0026
0061 900000   F      785             MOV     DPTR,#addr?645
0064 E0              786             MOVX    A,@DPTR
0065 04              787             INC     A
0066 F0              788             MOVX    @DPTR,A
0067                 789     ?C0026:
                     790     ;       }
                     791                             ; SOURCE LINE # 222
0067 0F              792             INC     R7
0068 BF0001          793             CJNE    R7,#00H,?C0027
006B 0E              794             INC     R6
006C                 795     ?C0027:
006C EF              796             MOV     A,R7
006D 6420            797             XRL     A,#020H
006F 4E              798             ORL     A,R6
0070 70D5            799             JNZ     ?C0012
0072                 800     ?C0013:
                     801     ;       return 0;
                     802                             ; SOURCE LINE # 223
0072 7F00            803             MOV     R7,#00H
                     804     ; }
                     805                             ; SOURCE LINE # 224
0074                 806     ?C0011:
0074 22              807             RET     
                     808     ; END OF _Flash_Erase
                     809     
                     810     ; 
                     811     ; char Flash_Write(unsigned int addr, unsigned char *dt)
                     812     
----                 813             RSEG  ?PR?_Flash_Write?FLASH
0000                 814     _Flash_Write:
                     815             USING   0
                     816                             ; SOURCE LINE # 226
0000 900000   F      817             MOV     DPTR,#addr?748
0003 EE              818             MOV     A,R6
0004 F0              819             MOVX    @DPTR,A
0005 A3              820             INC     DPTR
0006 EF              821             MOV     A,R7
0007 F0              822             MOVX    @DPTR,A
0008 A3              823             INC     DPTR
0009 EB              824             MOV     A,R3
000A F0              825             MOVX    @DPTR,A
000B A3              826             INC     DPTR
000C EA              827             MOV     A,R2
000D F0              828             MOVX    @DPTR,A
000E A3              829             INC     DPTR
000F E9              830             MOV     A,R1
0010 F0              831             MOVX    @DPTR,A
                     832     ; {
                     833                             ; SOURCE LINE # 227
                     834     ;       unsigned int i;
                     835     ;       unsigned char *pdt;
                     836     ;       unsigned char flash_state_id = FLASH_WRITE_SECURITY_ID;
                     837                             ; SOURCE LINE # 230
0011 900000   F      838             MOV     DPTR,#flash_state_id?752
0014 74F0            839             MOV     A,#0F0H
0016 F0              840             MOVX    @DPTR,A
                     841     ;       
                     842     ;       // Enable program mode
                     843     ;       Flash_Enter();
                     844                             ; SOURCE LINE # 233
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    14

0017 120000   F      845             LCALL   Flash_Enter
                     846     ;       
                     847     ;       FETCR = PGM_TIME;                               // 0x9D = 157 : (157+1) * 2 (31.25n
                             s * 256) = 2.528ms
                     848                             ; SOURCE LINE # 235
001A 75F49D          849             MOV     FETCR,#09DH
                     850     ; 
                     851     ;     // 0x81
                     852     ;     FEMR = FLASH_SEL                | // FSEL (Select Flash memory)
                     853                             ; SOURCE LINE # 238
001D 75F181          854             MOV     FEMR,#081H
                     855     ;            FLASH_CON_ENABLE         ; // FEEN (Enable program & erase of Flash)
                     856     ; 
                     857     ;     // 
                     858     ;     FECR = FLASH_PBUFF_RESET        ; // PBRSTB (Reset page buffer)
                     859                             ; SOURCE LINE # 242
0020 75F202          860             MOV     FECR,#02H
                     861     ; 
                     862     ;       FEARL = (unsigned char)(addr&0xff);
                     863                             ; SOURCE LINE # 244
0023 900000   F      864             MOV     DPTR,#addr?748
0026 E0              865             MOVX    A,@DPTR
0027 FE              866             MOV     R6,A
0028 A3              867             INC     DPTR
0029 E0              868             MOVX    A,@DPTR
002A F5F5            869             MOV     FEARL,A
                     870     ;       FEARM = (unsigned char)((addr>>8)&0xff);
                     871                             ; SOURCE LINE # 245
002C EE              872             MOV     A,R6
002D F5F6            873             MOV     FEARM,A
                     874     ;       FEARH = 0x00;
                     875                             ; SOURCE LINE # 246
002F E4              876             CLR     A
0030 F5F7            877             MOV     FEARH,A
                     878     ; 
                     879     ;     write_page_buffer(dt);
                     880                             ; SOURCE LINE # 248
0032 A3              881             INC     DPTR
0033 E0              882             MOVX    A,@DPTR
0034 FB              883             MOV     R3,A
0035 A3              884             INC     DPTR
0036 E0              885             MOVX    A,@DPTR
0037 FA              886             MOV     R2,A
0038 A3              887             INC     DPTR
0039 E0              888             MOVX    A,@DPTR
003A F9              889             MOV     R1,A
003B 120000   F      890             LCALL   _write_page_buffer
                     891     ; 
                     892     ;    // 0xA1
                     893     ;     g_FEMR = FLASH_SEL         |              // FSEL (Select Flash memory)
                     894                             ; SOURCE LINE # 251
003E 7500A1   F      895             MOV     g_FEMR,#0A1H
                     896     ;              FLASH_PGM_MODE    |              // PGM (Enable program or verify mode with 
                             VFY)
                     897     ;              FLASH_CON_ENABLE;                        // FEEN (Enable program & erase of 
                             Flash)
                     898     ; 
                     899     ;     // 0x0B
                     900     ;     g_FECR = FLASH_START_ERASE_PGM;           // WRITE (Start program or erase)
                     901                             ; SOURCE LINE # 256
0041 75000B   F      902             MOV     g_FECR,#0BH
                     903     ;                                                                               // FERSTB (
                             Reset Flash and EEPROM)
                     904     ;                                                                               // PBRSTB (
                             Reset page buffer)
                     905     ;       
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    15

                     906     ;       if(flash_state_id != FLASH_WRITE_SECURITY_ID)
                     907                             ; SOURCE LINE # 260
0044 900000   F      908             MOV     DPTR,#flash_state_id?752
0047 E0              909             MOVX    A,@DPTR
0048 64F0            910             XRL     A,#0F0H
004A 6009            911             JZ      ?C0016
                     912     ;       {
                     913                             ; SOURCE LINE # 261
                     914     ;               Flash_Exit();
                     915                             ; SOURCE LINE # 262
004C 120000   F      916             LCALL   Flash_Exit
                     917     ;               WDTMR = 0;                                              // If Flash ID fail
                             , may be WDTMR value error.
                     918                             ; SOURCE LINE # 263
004F E4              919             CLR     A
0050 F58D            920             MOV     WDTMR,A
                     921     ;               
                     922     ;               return -1;
                     923                             ; SOURCE LINE # 265
0052 7FFF            924             MOV     R7,#0FFH
0054 22              925             RET     
                     926     ;       }
                     927                             ; SOURCE LINE # 266
0055                 928     ?C0016:
                     929     ;       
                     930     ;     do_flash_at_sram();
                     931                             ; SOURCE LINE # 268
0055 120000   F      932             LCALL   do_flash_at_sram
                     933     ;  
                     934     ;       Flash_Exit();
                     935                             ; SOURCE LINE # 270
0058 120000   F      936             LCALL   Flash_Exit
                     937     ;       
                     938     ;       // read data
                     939     ;       pdt = dt;
                     940                             ; SOURCE LINE # 273
005B 900000   F      941             MOV     DPTR,#dt?749
005E E0              942             MOVX    A,@DPTR
005F FB              943             MOV     R3,A
0060 A3              944             INC     DPTR
0061 E0              945             MOVX    A,@DPTR
0062 FA              946             MOV     R2,A
0063 A3              947             INC     DPTR
0064 E0              948             MOVX    A,@DPTR
0065 F9              949             MOV     R1,A
                     950     ;---- Variable 'pdt?751' assigned to Register 'R1/R2/R3' ----
                     951     ;       for(i=0;i<PAGEBUF_SIZE;i++)             // Read flash data.
                     952                             ; SOURCE LINE # 274
0066 E4              953             CLR     A
0067 A3              954             INC     DPTR
0068 F0              955             MOVX    @DPTR,A
0069 A3              956             INC     DPTR
006A F0              957             MOVX    @DPTR,A
006B                 958     ?C0018:
                     959     ;       {       
                     960                             ; SOURCE LINE # 275
                     961     ;               if (coderom[addr]!=*pdt) 
                     962                             ; SOURCE LINE # 276
006B 120000   F      963             LCALL   ?C?CLDPTR
006E FF              964             MOV     R7,A
006F 900000   F      965             MOV     DPTR,#addr?748
0072 E0              966             MOVX    A,@DPTR
0073 FC              967             MOV     R4,A
0074 A3              968             INC     DPTR
0075 E0              969             MOVX    A,@DPTR
0076 F582            970             MOV     DPL,A
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    16

0078 8C83            971             MOV     DPH,R4
007A E4              972             CLR     A
007B 93              973             MOVC    A,@A+DPTR
007C 6F              974             XRL     A,R7
007D 6003            975             JZ      ?C0021
                     976     ;                       return -2;
                     977                             ; SOURCE LINE # 277
007F 7FFE            978             MOV     R7,#0FEH
0081 22              979             RET     
0082                 980     ?C0021:
                     981     ;               
                     982     ;               addr++;
                     983                             ; SOURCE LINE # 279
0082 900000   F      984             MOV     DPTR,#addr?748+01H
0085 E0              985             MOVX    A,@DPTR
0086 04              986             INC     A
0087 F0              987             MOVX    @DPTR,A
0088 7006            988             JNZ     ?C0028
008A 900000   F      989             MOV     DPTR,#addr?748
008D E0              990             MOVX    A,@DPTR
008E 04              991             INC     A
008F F0              992             MOVX    @DPTR,A
0090                 993     ?C0028:
                     994     ;               pdt++;
                     995                             ; SOURCE LINE # 280
0090 7401            996             MOV     A,#01H
0092 29              997             ADD     A,R1
0093 F9              998             MOV     R1,A
0094 E4              999             CLR     A
0095 3A             1000             ADDC    A,R2
0096 FA             1001             MOV     R2,A
                    1002     ;       }
                    1003                             ; SOURCE LINE # 281
0097 900000   F     1004             MOV     DPTR,#i?750+01H
009A E0             1005             MOVX    A,@DPTR
009B 04             1006             INC     A
009C F0             1007             MOVX    @DPTR,A
009D 7006           1008             JNZ     ?C0029
009F 900000   F     1009             MOV     DPTR,#i?750
00A2 E0             1010             MOVX    A,@DPTR
00A3 04             1011             INC     A
00A4 F0             1012             MOVX    @DPTR,A
00A5                1013     ?C0029:
00A5 900000   F     1014             MOV     DPTR,#i?750
00A8 E0             1015             MOVX    A,@DPTR
00A9 7004           1016             JNZ     ?C0030
00AB A3             1017             INC     DPTR
00AC E0             1018             MOVX    A,@DPTR
00AD 6420           1019             XRL     A,#020H
00AF                1020     ?C0030:
00AF 70BA           1021             JNZ     ?C0018
00B1                1022     ?C0019:
                    1023     ;       
                    1024     ;       return 0;
                    1025                             ; SOURCE LINE # 283
00B1 7F00           1026             MOV     R7,#00H
                    1027     ; }
                    1028                             ; SOURCE LINE # 284
00B3                1029     ?C0017:
00B3 22             1030             RET     
                    1031     ; END OF _Flash_Write
                    1032     
                    1033     ; 
                    1034     ; char Flash_Read(unsigned int addr, unsigned char *dt, unsigned char length)
                    1035     
----                1036             RSEG  ?PR?_Flash_Read?FLASH
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    17

0000                1037     _Flash_Read:
                    1038             USING   0
                    1039                             ; SOURCE LINE # 286
                    1040     ;---- Variable 'dt?854' assigned to Register 'R1/R2/R3' ----
0000 900000   F     1041             MOV     DPTR,#addr?853
0003 EE             1042             MOV     A,R6
0004 F0             1043             MOVX    @DPTR,A
0005 A3             1044             INC     DPTR
0006 EF             1045             MOV     A,R7
0007 F0             1046             MOVX    @DPTR,A
                    1047     ; {
                    1048                             ; SOURCE LINE # 287
                    1049     ;       unsigned int i;
                    1050     ;       unsigned char *pdt;
                    1051     ;       
                    1052     ;       // read data
                    1053     ;       pdt = dt;
                    1054                             ; SOURCE LINE # 292
                    1055     ;---- Variable 'pdt?857' assigned to Register 'R1/R2/R3' ----
                    1056     ;       for(i=addr; i<(addr+length); i++)       // Read flash data.
                    1057                             ; SOURCE LINE # 293
0008 900000   F     1058             MOV     DPTR,#i?856
000B EE             1059             MOV     A,R6
000C F0             1060             MOVX    @DPTR,A
000D A3             1061             INC     DPTR
000E EF             1062             MOV     A,R7
000F F0             1063             MOVX    @DPTR,A
0010                1064     ?C0022:
0010 900000   F     1065             MOV     DPTR,#length?855
0013 E0             1066             MOVX    A,@DPTR
0014 FF             1067             MOV     R7,A
0015 900000   F     1068             MOV     DPTR,#addr?853+01H
0018 E0             1069             MOVX    A,@DPTR
0019 2F             1070             ADD     A,R7
001A FF             1071             MOV     R7,A
001B 900000   F     1072             MOV     DPTR,#addr?853
001E E0             1073             MOVX    A,@DPTR
001F 3400           1074             ADDC    A,#00H
0021 FE             1075             MOV     R6,A
0022 900000   F     1076             MOV     DPTR,#i?856
0025 E0             1077             MOVX    A,@DPTR
0026 FC             1078             MOV     R4,A
0027 A3             1079             INC     DPTR
0028 E0             1080             MOVX    A,@DPTR
0029 FD             1081             MOV     R5,A
002A C3             1082             CLR     C
002B 9F             1083             SUBB    A,R7
002C EC             1084             MOV     A,R4
002D 9E             1085             SUBB    A,R6
002E 5020           1086             JNC     ?C0023
                    1087     ;       {
                    1088                             ; SOURCE LINE # 294
                    1089     ;               *pdt = coderom[i];
                    1090                             ; SOURCE LINE # 295
0030 8D82           1091             MOV     DPL,R5
0032 8C83           1092             MOV     DPH,R4
0034 E4             1093             CLR     A
0035 93             1094             MOVC    A,@A+DPTR
0036 120000   F     1095             LCALL   ?C?CSTPTR
                    1096     ;               pdt++;
                    1097                             ; SOURCE LINE # 296
0039 7401           1098             MOV     A,#01H
003B 29             1099             ADD     A,R1
003C F9             1100             MOV     R1,A
003D E4             1101             CLR     A
003E 3A             1102             ADDC    A,R2
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    18

003F FA             1103             MOV     R2,A
                    1104     ;       }
                    1105                             ; SOURCE LINE # 297
0040 900000   F     1106             MOV     DPTR,#i?856+01H
0043 E0             1107             MOVX    A,@DPTR
0044 04             1108             INC     A
0045 F0             1109             MOVX    @DPTR,A
0046 70C8           1110             JNZ     ?C0022
0048 900000   F     1111             MOV     DPTR,#i?856
004B E0             1112             MOVX    A,@DPTR
004C 04             1113             INC     A
004D F0             1114             MOVX    @DPTR,A
004E                1115     ?C0031:
004E 80C0           1116             SJMP    ?C0022
0050                1117     ?C0023:
                    1118     ;       
                    1119     ;       return 0;
                    1120                             ; SOURCE LINE # 299
0050 7F00           1121             MOV     R7,#00H
                    1122     ; }
                    1123                             ; SOURCE LINE # 300
0052 22             1124             RET     
                    1125     ; END OF _Flash_Read
                    1126     
                    1127             END
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    19

SYMBOL TABLE LISTING
------ ----- -------


N A M E                          T Y P E  V A L U E   ATTRIBUTES

?C0006. . . . . . . . . . . . .  C ADDR   000AH   R   SEG=?PR?DO_FLASH_AT_SRAM?FLASH
?C0007. . . . . . . . . . . . .  C ADDR   0028H   R   SEG=?PR?DO_FLASH_AT_SRAM?FLASH
?C0010. . . . . . . . . . . . .  C ADDR   003EH   R   SEG=?PR?_FLASH_ERASE?FLASH
?C0011. . . . . . . . . . . . .  C ADDR   0074H   R   SEG=?PR?_FLASH_ERASE?FLASH
?C0012. . . . . . . . . . . . .  C ADDR   0047H   R   SEG=?PR?_FLASH_ERASE?FLASH
?C0013. . . . . . . . . . . . .  C ADDR   0072H   R   SEG=?PR?_FLASH_ERASE?FLASH
?C0015. . . . . . . . . . . . .  C ADDR   0059H   R   SEG=?PR?_FLASH_ERASE?FLASH
?C0016. . . . . . . . . . . . .  C ADDR   0055H   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0017. . . . . . . . . . . . .  C ADDR   00B3H   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0018. . . . . . . . . . . . .  C ADDR   006BH   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0019. . . . . . . . . . . . .  C ADDR   00B1H   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0021. . . . . . . . . . . . .  C ADDR   0082H   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0022. . . . . . . . . . . . .  C ADDR   0010H   R   SEG=?PR?_FLASH_READ?FLASH
?C0023. . . . . . . . . . . . .  C ADDR   0050H   R   SEG=?PR?_FLASH_READ?FLASH
?C0026. . . . . . . . . . . . .  C ADDR   0067H   R   SEG=?PR?_FLASH_ERASE?FLASH
?C0027. . . . . . . . . . . . .  C ADDR   006CH   R   SEG=?PR?_FLASH_ERASE?FLASH
?C0028. . . . . . . . . . . . .  C ADDR   0090H   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0029. . . . . . . . . . . . .  C ADDR   00A5H   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0030. . . . . . . . . . . . .  C ADDR   00AFH   R   SEG=?PR?_FLASH_WRITE?FLASH
?C0031. . . . . . . . . . . . .  C ADDR   004EH   R   SEG=?PR?_FLASH_READ?FLASH
?C?CLDPTR . . . . . . . . . . .  C ADDR   -----       EXT
?C?CSTPTR . . . . . . . . . . .  C ADDR   -----       EXT
?DO_FLASH_AT_SRAM?BYTE. . . . .  X ADDR   0000H   R   SEG=?XD?DO_FLASH_AT_SRAM?FLASH
?DT?FLASH . . . . . . . . . . .  D SEG    0006H       REL=UNIT
?PR?DO_FLASH_AT_SRAM?FLASH. . .  C SEG    002CH       REL=UNIT
?PR?DO_FLASH_AT_SRAM_SRC?FLASH.  C SEG    000FH       REL=UNIT
?PR?FLASH_ENTER?FLASH . . . . .  C SEG    0029H       REL=UNIT
?PR?FLASH_EXIT?FLASH. . . . . .  C SEG    002CH       REL=UNIT
?PR?WRITE_PAGE_BUFFER_SRC?FLASH  C SEG    0012H       REL=UNIT
?PR?_FLASH_ERASE?FLASH. . . . .  C SEG    0075H       REL=UNIT
?PR?_FLASH_READ?FLASH . . . . .  C SEG    0053H       REL=UNIT
?PR?_FLASH_WRITE?FLASH. . . . .  C SEG    00B4H       REL=UNIT
?PR?_WRITE_PAGE_BUFFER?FLASH. .  C SEG    001DH       REL=UNIT
?XD?DO_FLASH_AT_SRAM?FLASH. . .  X SEG    0001H       REL=UNIT
?XD?_FLASH_ERASE?FLASH. . . . .  X SEG    0002H       REL=UNIT
?XD?_FLASH_READ?FLASH . . . . .  X SEG    0008H       REL=UNIT
?XD?_FLASH_WRITE?FLASH. . . . .  X SEG    0008H       REL=UNIT
?XD?_WRITE_PAGE_BUFFER?FLASH. .  X SEG    0003H       REL=UNIT
?_FLASH_ERASE?BYTE. . . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_ERASE?FLASH
?_FLASH_READ?BYTE . . . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_READ?FLASH
?_FLASH_WRITE?BYTE. . . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_WRITE?FLASH
?_WRITE_PAGE_BUFFER?BYTE. . . .  X ADDR   0000H   R   SEG=?XD?_WRITE_PAGE_BUFFER?FLASH
AC. . . . . . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC . . . . . . . . . . . . . .  D ADDR   00E0H   A   
ADCM. . . . . . . . . . . . . .  D ADDR   0095H   A   
ADCM1 . . . . . . . . . . . . .  D ADDR   0096H   A   
ADCR. . . . . . . . . . . . . .  D ADDR   0096H   A   
ADCRH . . . . . . . . . . . . .  D ADDR   0097H   A   
ADCRL . . . . . . . . . . . . .  D ADDR   0096H   A   
ADC_INT_EN. . . . . . . . . . .  B ADDR   00C8H.0 A   
ADC_INT_F . . . . . . . . . . .  B ADDR   00B0H.0 A   
ADDR?645. . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_ERASE?FLASH
ADDR?748. . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_WRITE?FLASH
ADDR?853. . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?_FLASH_READ?FLASH
AR4 . . . . . . . . . . . . . .  D ADDR   0004H   A   
B . . . . . . . . . . . . . . .  D ADDR   00F0H   A   
BITCNT. . . . . . . . . . . . .  D ADDR   0085H   A   
BITCR . . . . . . . . . . . . .  D ADDR   0086H   A   
BIT_INT_EN. . . . . . . . . . .  B ADDR   00C8H.2 A   
BIT_INT_F . . . . . . . . . . .  B ADDR   00B0H.2 A   
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    20

CMPCR . . . . . . . . . . . . .  D ADDR   00D6H   A   
CMPDBT. . . . . . . . . . . . .  D ADDR   00DEH   A   
CMPTR . . . . . . . . . . . . .  D ADDR   00D7H   A   
CMP_INT_EN. . . . . . . . . . .  B ADDR   00B8H.0 A   
CMP_INT_F . . . . . . . . . . .  B ADDR   00A0H.0 A   
CMX . . . . . . . . . . . . . .  D ADDR   00B2H   A   
CODE_BUF. . . . . . . . . . . .  D ADDR   0030H   A   
CY. . . . . . . . . . . . . . .  B ADDR   00D0H.7 A   
DBTSR . . . . . . . . . . . . .  D ADDR   0084H   A   
DMY_REFA. . . . . . . . . . . .  D ADDR   00D4H   A   
DMY_REFB. . . . . . . . . . . .  D ADDR   00D5H   A   
DO_FLASH_AT_SRAM. . . . . . . .  C ADDR   0000H   R   SEG=?PR?DO_FLASH_AT_SRAM?FLASH
DO_FLASH_AT_SRAM_SRC. . . . . .  C ADDR   0000H   R   SEG=?PR?DO_FLASH_AT_SRAM_SRC?FLASH
DPH . . . . . . . . . . . . . .  D ADDR   0083H   A   
DPH1. . . . . . . . . . . . . .  D ADDR   0083H   A   
DPL . . . . . . . . . . . . . .  D ADDR   0082H   A   
DPL1. . . . . . . . . . . . . .  D ADDR   0082H   A   
DPTR0 . . . . . . . . . . . . .  D ADDR   0082H   A   
DPTR1 . . . . . . . . . . . . .  D ADDR   0082H   A   
DT?749. . . . . . . . . . . . .  X ADDR   0002H   R   SEG=?XD?_FLASH_WRITE?FLASH
DT?854. . . . . . . . . . . . .  X ADDR   0002H   R   SEG=?XD?_FLASH_READ?FLASH
EA. . . . . . . . . . . . . . .  B ADDR   00B8H.7 A   
EIFLAG. . . . . . . . . . . . .  D ADDR   00C9H   A   
EIN10_INT_F . . . . . . . . . .  B ADDR   00A0H.1 A   
EIN11_INT_F . . . . . . . . . .  B ADDR   00A0H.2 A   
EIN12_INT_F . . . . . . . . . .  B ADDR   00A0H.3 A   
EINT10_INT_EN . . . . . . . . .  B ADDR   00B8H.1 A   
EINT11_INT_EN . . . . . . . . .  B ADDR   00B8H.2 A   
EINT12_INT_EN . . . . . . . . .  B ADDR   00B8H.3 A   
EINT_INT_EN . . . . . . . . . .  B ADDR   00B8H.4 A   
EINT_INT_F. . . . . . . . . . .  B ADDR   00A0H.4 A   
EIPOL0. . . . . . . . . . . . .  D ADDR   008BH   A   
EIPOL1. . . . . . . . . . . . .  D ADDR   008CH   A   
EO. . . . . . . . . . . . . . .  D ADDR   00A2H   A   
F0. . . . . . . . . . . . . . .  B ADDR   00D0H.5 A   
F1. . . . . . . . . . . . . . .  B ADDR   00D0H.1 A   
FEARH . . . . . . . . . . . . .  D ADDR   00F7H   A   
FEARL . . . . . . . . . . . . .  D ADDR   00F5H   A   
FEARM . . . . . . . . . . . . .  D ADDR   00F6H   A   
FECR. . . . . . . . . . . . . .  D ADDR   00F2H   A   
FEDR. . . . . . . . . . . . . .  D ADDR   00EFH   A   
FEMR. . . . . . . . . . . . . .  D ADDR   00F1H   A   
FESR. . . . . . . . . . . . . .  D ADDR   00F3H   A   
FETCR . . . . . . . . . . . . .  D ADDR   00F4H   A   
FETR. . . . . . . . . . . . . .  D ADDR   00E7H   A   
FLASH . . . . . . . . . . . . .  N NUMB   -----       
FLASH_ENTER . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FLASH_ENTER?FLASH
FLASH_EXIT. . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?FLASH_EXIT?FLASH
FLASH_STATE_ID?752. . . . . . .  X ADDR   0007H   R   SEG=?XD?_FLASH_WRITE?FLASH
FPCR. . . . . . . . . . . . . .  D ADDR   00ECH   A   
G_FECR. . . . . . . . . . . . .  D ADDR   0004H   R   SEG=?DT?FLASH
G_FEMR. . . . . . . . . . . . .  D ADDR   0005H   R   SEG=?DT?FLASH
G_IE. . . . . . . . . . . . . .  D ADDR   0002H   R   SEG=?DT?FLASH
G_IE1 . . . . . . . . . . . . .  D ADDR   0000H   R   SEG=?DT?FLASH
G_IE2 . . . . . . . . . . . . .  D ADDR   0001H   R   SEG=?DT?FLASH
G_WDTMR . . . . . . . . . . . .  D ADDR   0003H   R   SEG=?DT?FLASH
I2CDR . . . . . . . . . . . . .  D ADDR   00FDH   A   
I2CMR . . . . . . . . . . . . .  D ADDR   00F9H   A   
I2CSAR. . . . . . . . . . . . .  D ADDR   00FEH   A   
I2CSAR1 . . . . . . . . . . . .  D ADDR   00FFH   A   
I2CSCLHR. . . . . . . . . . . .  D ADDR   00FBH   A   
I2CSCLLR. . . . . . . . . . . .  D ADDR   00FAH   A   
I2CSDHR . . . . . . . . . . . .  D ADDR   00FCH   A   
I2CSR . . . . . . . . . . . . .  D ADDR   00F8H   A   
I2C_INT_EN. . . . . . . . . . .  B ADDR   00C0H.0 A   
I2C_INT_F . . . . . . . . . . .  B ADDR   00A8H.0 A   
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    21

I?750 . . . . . . . . . . . . .  X ADDR   0005H   R   SEG=?XD?_FLASH_WRITE?FLASH
I?856 . . . . . . . . . . . . .  X ADDR   0006H   R   SEG=?XD?_FLASH_READ?FLASH
IE. . . . . . . . . . . . . . .  D ADDR   00B8H   A   
IE1 . . . . . . . . . . . . . .  D ADDR   00C0H   A   
IE2 . . . . . . . . . . . . . .  D ADDR   00C8H   A   
ILVL. . . . . . . . . . . . . .  D ADDR   009AH   A   
IOFFSET . . . . . . . . . . . .  D ADDR   008AH   A   
IP. . . . . . . . . . . . . . .  D ADDR   00E8H   A   
IP1 . . . . . . . . . . . . . .  D ADDR   00E9H   A   
IP2 . . . . . . . . . . . . . .  D ADDR   00EAH   A   
IRQ0. . . . . . . . . . . . . .  D ADDR   00A0H   A   
IRQ1. . . . . . . . . . . . . .  D ADDR   00A8H   A   
IRQ2. . . . . . . . . . . . . .  D ADDR   00B0H   A   
LDOCR . . . . . . . . . . . . .  D ADDR   00AAH   A   
LENGTH?855. . . . . . . . . . .  X ADDR   0005H   R   SEG=?XD?_FLASH_READ?FLASH
LOOP0 . . . . . . . . . . . . .  C ADDR   001CH   R   SEG=?PR?FLASH_EXIT?FLASH
LVIR. . . . . . . . . . . . . .  D ADDR   0089H   A   
LVI_INT_EN. . . . . . . . . . .  B ADDR   00C8H.3 A   
LVI_INT_F . . . . . . . . . . .  B ADDR   00B0H.3 A   
OSCCR . . . . . . . . . . . . .  D ADDR   00D8H   A   
OV. . . . . . . . . . . . . . .  B ADDR   00D0H.2 A   
P . . . . . . . . . . . . . . .  B ADDR   00D0H.0 A   
P0. . . . . . . . . . . . . . .  D ADDR   0080H   A   
P00 . . . . . . . . . . . . . .  B ADDR   0080H.0 A   
P01 . . . . . . . . . . . . . .  B ADDR   0080H.1 A   
P02 . . . . . . . . . . . . . .  B ADDR   0080H.2 A   
P03 . . . . . . . . . . . . . .  B ADDR   0080H.3 A   
P04 . . . . . . . . . . . . . .  B ADDR   0080H.4 A   
P05 . . . . . . . . . . . . . .  B ADDR   0080H.5 A   
P06 . . . . . . . . . . . . . .  B ADDR   0080H.6 A   
P07 . . . . . . . . . . . . . .  B ADDR   0080H.7 A   
P0DB. . . . . . . . . . . . . .  D ADDR   009EH   A   
P0FSR . . . . . . . . . . . . .  D ADDR   00B3H   A   
P0FSRH. . . . . . . . . . . . .  D ADDR   00B4H   A   
P0FSRL. . . . . . . . . . . . .  D ADDR   00B3H   A   
P0IO. . . . . . . . . . . . . .  D ADDR   009BH   A   
P0OD. . . . . . . . . . . . . .  D ADDR   009DH   A   
P0PU. . . . . . . . . . . . . .  D ADDR   009CH   A   
P1. . . . . . . . . . . . . . .  D ADDR   0088H   A   
P10 . . . . . . . . . . . . . .  B ADDR   0088H.0 A   
P11 . . . . . . . . . . . . . .  B ADDR   0088H.1 A   
P12 . . . . . . . . . . . . . .  B ADDR   0088H.2 A   
P13 . . . . . . . . . . . . . .  B ADDR   0088H.3 A   
P14 . . . . . . . . . . . . . .  B ADDR   0088H.4 A   
P15 . . . . . . . . . . . . . .  B ADDR   0088H.5 A   
P1DB. . . . . . . . . . . . . .  D ADDR   00A6H   A   
P1FSR . . . . . . . . . . . . .  D ADDR   00B5H   A   
P1FSRH. . . . . . . . . . . . .  D ADDR   00B6H   A   
P1FSRL. . . . . . . . . . . . .  D ADDR   00B5H   A   
P1IO. . . . . . . . . . . . . .  D ADDR   00A3H   A   
P1OD. . . . . . . . . . . . . .  D ADDR   00A5H   A   
P1PU. . . . . . . . . . . . . .  D ADDR   00A4H   A   
P2. . . . . . . . . . . . . . .  D ADDR   0090H   A   
P20 . . . . . . . . . . . . . .  B ADDR   0090H.0 A   
P21 . . . . . . . . . . . . . .  B ADDR   0090H.1 A   
P22 . . . . . . . . . . . . . .  B ADDR   0090H.2 A   
P23 . . . . . . . . . . . . . .  B ADDR   0090H.3 A   
P2DB. . . . . . . . . . . . . .  D ADDR   00AEH   A   
P2FSR . . . . . . . . . . . . .  D ADDR   00B7H   A   
P2IO. . . . . . . . . . . . . .  D ADDR   00ABH   A   
P2OD. . . . . . . . . . . . . .  D ADDR   00ADH   A   
P2PU. . . . . . . . . . . . . .  D ADDR   00ACH   A   
PCON. . . . . . . . . . . . . .  D ADDR   0087H   A   
PSW . . . . . . . . . . . . . .  D ADDR   00D0H   A   
RS0 . . . . . . . . . . . . . .  B ADDR   00D0H.3 A   
RS1 . . . . . . . . . . . . . .  B ADDR   00D0H.4 A   
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    22

RSFR. . . . . . . . . . . . . .  D ADDR   0098H   A   
SCCR. . . . . . . . . . . . . .  D ADDR   00D9H   A   
SP. . . . . . . . . . . . . . .  D ADDR   0081H   A   
SYSCON_AR . . . . . . . . . . .  D ADDR   008FH   A   
T0CDR . . . . . . . . . . . . .  D ADDR   0094H   A   
T0CNT . . . . . . . . . . . . .  D ADDR   0093H   A   
T0CR. . . . . . . . . . . . . .  D ADDR   0092H   A   
T0DR. . . . . . . . . . . . . .  D ADDR   0094H   A   
T0_INT_EN . . . . . . . . . . .  B ADDR   00C0H.4 A   
T0_INT_F. . . . . . . . . . . .  B ADDR   00A8H.4 A   
T1ADR . . . . . . . . . . . . .  D ADDR   00BCH   A   
T1ADRH. . . . . . . . . . . . .  D ADDR   00BDH   A   
T1ADRL. . . . . . . . . . . . .  D ADDR   00BCH   A   
T1BDR . . . . . . . . . . . . .  D ADDR   00BEH   A   
T1BDRH. . . . . . . . . . . . .  D ADDR   00BFH   A   
T1BDRL. . . . . . . . . . . . .  D ADDR   00BEH   A   
T1CDR . . . . . . . . . . . . .  D ADDR   00CCH   A   
T1CDRH. . . . . . . . . . . . .  D ADDR   00CDH   A   
T1CDRL. . . . . . . . . . . . .  D ADDR   00CCH   A   
T1CR. . . . . . . . . . . . . .  D ADDR   00BAH   A   
T1CRH . . . . . . . . . . . . .  D ADDR   00BBH   A   
T1CRL . . . . . . . . . . . . .  D ADDR   00BAH   A   
T1DDR . . . . . . . . . . . . .  D ADDR   00CEH   A   
T1DDRH. . . . . . . . . . . . .  D ADDR   00CFH   A   
T1DDRL. . . . . . . . . . . . .  D ADDR   00CEH   A   
T1_INT_EN . . . . . . . . . . .  B ADDR   00C0H.5 A   
T1_INT_F. . . . . . . . . . . .  B ADDR   00A8H.5 A   
T2ADR . . . . . . . . . . . . .  D ADDR   00C4H   A   
T2ADRH. . . . . . . . . . . . .  D ADDR   00C5H   A   
T2ADRL. . . . . . . . . . . . .  D ADDR   00C4H   A   
T2BDR . . . . . . . . . . . . .  D ADDR   00C6H   A   
T2BDRH. . . . . . . . . . . . .  D ADDR   00C7H   A   
T2BDRL. . . . . . . . . . . . .  D ADDR   00C6H   A   
T2CR. . . . . . . . . . . . . .  D ADDR   00C2H   A   
T2CRH . . . . . . . . . . . . .  D ADDR   00C3H   A   
T2CRL . . . . . . . . . . . . .  D ADDR   00C2H   A   
T2_INT_EN . . . . . . . . . . .  B ADDR   00C0H.6 A   
T2_INT_F. . . . . . . . . . . .  B ADDR   00A8H.6 A   
TDISR . . . . . . . . . . . . .  D ADDR   00D3H   A   
TEMP?441. . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?_WRITE_PAGE_BUFFER?FLASH
TEMP?543. . . . . . . . . . . .  X ADDR   0000H   R   SEG=?XD?DO_FLASH_AT_SRAM?FLASH
TEST. . . . . . . . . . . . . .  D ADDR   00D1H   A   
TESTH . . . . . . . . . . . . .  D ADDR   00D2H   A   
TESTL . . . . . . . . . . . . .  D ADDR   00D1H   A   
UART_RX_INT_EN. . . . . . . . .  B ADDR   00C0H.1 A   
UART_RX_INT_F . . . . . . . . .  B ADDR   00A8H.1 A   
UART_TX_INT_EN. . . . . . . . .  B ADDR   00C0H.2 A   
UART_TX_INT_F . . . . . . . . .  B ADDR   00A8H.2 A   
UBAUD . . . . . . . . . . . . .  D ADDR   00E5H   A   
UCTRL1. . . . . . . . . . . . .  D ADDR   00E1H   A   
UCTRL2. . . . . . . . . . . . .  D ADDR   00E2H   A   
UCTRL3. . . . . . . . . . . . .  D ADDR   00E3H   A   
UCTRL4. . . . . . . . . . . . .  D ADDR   00EBH   A   
UDATA . . . . . . . . . . . . .  D ADDR   00E6H   A   
USTAT . . . . . . . . . . . . .  D ADDR   00E4H   A   
WDTCR . . . . . . . . . . . . .  D ADDR   008EH   A   
WDTMR . . . . . . . . . . . . .  D ADDR   008DH   A   
WDTR. . . . . . . . . . . . . .  D ADDR   008EH   A   
WDT_INT_EN. . . . . . . . . . .  B ADDR   00C8H.1 A   
WDT_INT_F . . . . . . . . . . .  B ADDR   00B0H.1 A   
WRITE_PAGE_BUFFER_LOOP. . . . .  C ADDR   0012H   R   SEG=?PR?_WRITE_PAGE_BUFFER?FLASH
WRITE_PAGE_BUFFER_SRC . . . . .  C ADDR   0000H   R   SEG=?PR?WRITE_PAGE_BUFFER_SRC?FLASH
WRITE_PAGE_BUFFER_SRC_LOOP. . .  C ADDR   0008H   R   SEG=?PR?WRITE_PAGE_BUFFER_SRC?FLASH
XBANK . . . . . . . . . . . . .  D ADDR   00DFH   A   
_FLASH_BUSY_WAIT. . . . . . . .  C ADDR   0006H   R   SEG=?PR?DO_FLASH_AT_SRAM_SRC?FLASH
_FLASH_ERASE. . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FLASH_ERASE?FLASH
A51 MACRO ASSEMBLER  FLASH                                                                01/04/2023 16:06:19 PAGE    23

_FLASH_READ . . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FLASH_READ?FLASH
_FLASH_WRITE. . . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_FLASH_WRITE?FLASH
_WRITE_PAGE_BUFFER. . . . . . .  C ADDR   0000H   R   SEG=?PR?_WRITE_PAGE_BUFFER?FLASH


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
