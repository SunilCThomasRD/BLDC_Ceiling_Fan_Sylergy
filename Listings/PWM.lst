C51 COMPILER V9.60.0.0   PWM                                                               12/19/2022 10:49:29 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\PWM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\PWM.c LARGE OPTIMIZE(4,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\PWM.lst) TABS(2) OBJECT(.\Objects\PWM.obj)

line level    source

   1          #include  "A94B114.h"
   2          #include  "func_def.h"
   3          //#include  "MotorPara.h"
   4          
   5          extern unsigned char TimerStartFlag,SleepTimerCompleteFlag_1hr,SleepTimerStartFlag_1hr;
   6          extern unsigned int TimerHrsValue,General_Counter;
   7          extern unsigned char Command,LED_blink_Counter,LED_blink_Status;
   8          extern long SleepTimerCounter_1hr;
   9          extern struct RemoteStatus RemoteData;
  10          
  11          //void i2c_speed(unsigned char);
  12          //unsigned char temp = 0;
  13          void fan_power_off(void)
  14          { 
  15   1        /*T2BDRH = 0x00;    // duty High
  16   1        T2BDRL = 0x00;    // duty Low
  17   1        T2CRH |= 0x80;    // enable counter*/
  18   1        //i2c_devicew(speedCtrl_Base_address, FAN_OFF_VALUE); 
  19   1        //I2C_Motor_Start();
  20   1        i2c_speed(FAN_OFF_VALUE);
  21   1      }
  22          
  23          void fan_power_on(void)
  24          {
  25   1        if(RemoteData.Power == 1)
  26   1        {
  27   2          LED_blink_Counter = 2+(3*(RemoteData.Light));
  28   2          LED_blink_Status = 1;
  29   2          fan_power_off();
  30   2          //i2c_speed(FAN_OFF_VALUE);
  31   2          RemoteData.Power = 0;
  32   2          if(RemoteData.FanSpeed == 0)
  33   2          {
  34   3            RemoteData.FanSpeed = 5;
  35   3          }
  36   2          if(RemoteData.Timer_Hrs != REMOTE_TIMER_OFF)
  37   2          {
  38   3            TimerStartFlag = 0;
  39   3            General_Counter = 0;
  40   3            TimerHrsValue = 0;
  41   3            RemoteData.Timer_Hrs = REMOTE_TIMER_OFF;  
  42   3          }
  43   2          if(RemoteData.Sleep)
  44   2          {
  45   3            SleepTimerStartFlag_1hr = 0;
  46   3            SleepTimerCompleteFlag_1hr = 0;
  47   3            SleepTimerCounter_1hr = 0;
  48   3            RemoteData.Sleep = 0;
  49   3          }
  50   2          //fan_power = 0;
  51   2          Command = 0;
  52   2        }
  53   1        else
  54   1        {
C51 COMPILER V9.60.0.0   PWM                                                               12/19/2022 10:49:29 PAGE 2   

  55   2          switch(RemoteData.FanSpeed)
  56   2          {
  57   3            case 0:
  58   3              //operation
  59   3              fan_power_off();
  60   3              //i2c_speed(FAN_OFF_VALUE);
  61   3              break;
  62   3            case 1:
  63   3              //operation
  64   3              fanSpeed1();
  65   3              break;
  66   3            case 2:
  67   3              //operation
  68   3              fanSpeed2();
  69   3              break;
  70   3            case 3:
  71   3              //operation
  72   3              fanSpeed3();
  73   3              break;
  74   3            case 4:
  75   3              //operation
  76   3              fanSpeed4();
  77   3              break;
  78   3            case 5:
  79   3              //operation
  80   3              fanSpeed5();
  81   3              break;
  82   3            case 6:
  83   3              //operation
  84   3              fanSpeed6();
  85   3              break;
  86   3            case 7:
  87   3              //operation
  88   3              fanSpeed_BOOST();
  89   3              break;
  90   3            default:
  91   3              //operation
  92   3              //not possible
  93   3              break;
  94   3          }
  95   2          RemoteData.Power = 1;
  96   2          Command = 0;
  97   2        } 
  98   1      }
  99          
 100          void fanSpeed1(void)    // 45% duty cycle
 101          {
 102   1          LED_blink_Counter = 2+(3*(RemoteData.Light));
 103   1          LED_blink_Status = 1;
 104   1          /*T2BDRH = 0x02;    // duty High
 105   1          T2BDRL = 0x58;    // duty Low
 106   1          T2CRH = 0xB2;   // enable counter*/
 107   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED1_VALUE);
 108   1          i2c_speed(FAN_SPEED1_VALUE);
 109   1          RemoteData.FanSpeed = 1;
 110   1          RemoteData.Power = 1;
 111   1          
 112   1      }
 113          
 114          void fanSpeed2(void)    // 55% duty cycle
 115          {
 116   1          LED_blink_Counter = 4+(3*(RemoteData.Light));
C51 COMPILER V9.60.0.0   PWM                                                               12/19/2022 10:49:29 PAGE 3   

 117   1          LED_blink_Status = 1;
 118   1          /*T2BDRH = 0x02;    // duty High
 119   1          T2BDRL = 0xDE;    // duty Low
 120   1          T2CRH = 0xB2;   // enable counter*/
 121   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED2_VALUE);  
 122   1          i2c_speed(FAN_SPEED2_VALUE);
 123   1          RemoteData.FanSpeed = 2;
 124   1          RemoteData.Power = 1;
 125   1        
 126   1      }
 127          
 128          void fanSpeed3(void)    // 65% duty cycle
 129          {
 130   1          LED_blink_Counter = 6+(3*(RemoteData.Light));
 131   1          LED_blink_Status = 1;
 132   1          /*T2BDRH = 0x03;    // duty High
 133   1          T2BDRL = 0x63;    // duty Low
 134   1          T2CRH = 0xB2;   // enable counter*/
 135   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED3_VALUE);
 136   1          i2c_speed(FAN_SPEED3_VALUE);  
 137   1          RemoteData.FanSpeed = 3;
 138   1          RemoteData.Power = 1;
 139   1          
 140   1      }
 141          
 142          void fanSpeed4(void)    // 75% duty cycle
 143          {
 144   1          LED_blink_Counter = 8+(3*(RemoteData.Light));
 145   1          LED_blink_Status = 1;
 146   1          /*T2BDRH = 0x03;    // duty High
 147   1          T2BDRL = 0xE8;    // duty Low
 148   1          T2CRH = 0xB2;   // enable counter*/
 149   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED4_VALUE);
 150   1          i2c_speed(FAN_SPEED4_VALUE);
 151   1          RemoteData.FanSpeed = 4;
 152   1          RemoteData.Power = 1;
 153   1        
 154   1      }
 155          
 156          void fanSpeed5(void)    // 80% duty cycle
 157          {
 158   1          LED_blink_Counter = 10+(3*(RemoteData.Light));
 159   1          LED_blink_Status = 1;
 160   1          /*T2BDRH = 0x04;    // duty High
 161   1          T2BDRL = 0x2B;    // duty Low
 162   1          T2CRH = 0xB2;   // enable counter*/
 163   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED5_VALUE);
 164   1          i2c_speed(FAN_SPEED5_VALUE);
 165   1          RemoteData.FanSpeed = 5;
 166   1          RemoteData.Power = 1;
 167   1      }
 168          
 169          void fanSpeed6(void)
 170          {
 171   1          LED_blink_Counter = 12+(3*(RemoteData.Light));
 172   1          LED_blink_Status = 1;
 173   1          /*T2BDRH = 0x04;    // duty High
 174   1          T2BDRL = 0x2B;    // duty Low
 175   1          T2CRH = 0xB2;   // enable counter*/
 176   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED5_VALUE);
 177   1          i2c_speed(FAN_SPEED6_VALUE);
 178   1          RemoteData.FanSpeed = 6;
C51 COMPILER V9.60.0.0   PWM                                                               12/19/2022 10:49:29 PAGE 4   

 179   1          RemoteData.Power = 1;
 180   1      }
 181          
 182          void fanSpeed_BOOST(void)   // 85% duty cycle
 183          {   
 184   1          LED_blink_Counter = 2+(3*(RemoteData.Light));
 185   1          LED_blink_Status = 1;
 186   1          /*T2BDRH = 0x04;    // duty High
 187   1          T2BDRL = 0x6D;    // duty Low
 188   1          T2CRH = 0xB2;   // enable counter*/
 189   1          //i2c_devicew(speedCtrl_Base_address, FAN_BOOST_VALUE); 
 190   1          i2c_speed(FAN_BOOST_VALUE);
 191   1          RemoteData.FanSpeed = 7;
 192   1          RemoteData.Power = 1;
 193   1      
 194   1      }
 195          
 196          void Timer_Hrs_process(unsigned char Timer)
 197          {
 198   1        if(Timer == REMOTE_TIMER_2HRS)
 199   1        {
 200   2          LED_blink_Counter = 4+(3*(RemoteData.Light));
 201   2          LED_blink_Status = 1;
 202   2          TimerStartFlag = 1;
 203   2          TimerHrsValue = 14400;
 204   2        }
 205   1        else if(Timer == REMOTE_TIMER_4HRS)
 206   1        {
 207   2          LED_blink_Counter = 8+(3*(RemoteData.Light));
 208   2          LED_blink_Status = 1;
 209   2          TimerStartFlag = 1;
 210   2          TimerHrsValue = 28800;
 211   2        }
 212   1        else if(Timer == REMOTE_TIMER_6HRS)
 213   1        {
 214   2          LED_blink_Counter = 12+(3*(RemoteData.Light));
 215   2          LED_blink_Status = 1;
 216   2          TimerStartFlag = 1;
 217   2          TimerHrsValue = 43200;
 218   2        }
 219   1        else if(Timer == REMOTE_TIMER_8HRS)
 220   1        {
 221   2          LED_blink_Counter = 16+(3*(RemoteData.Light));
 222   2          LED_blink_Status = 1;
 223   2          TimerStartFlag = 1;
 224   2          TimerHrsValue = 57600;
 225   2        }
 226   1      }
 227          
 228          void SleepOperation(void)
 229          {
 230   1        if(SleepTimerCompleteFlag_1hr)
 231   1        {
 232   2          RemoteData.FanSpeed = RemoteData.FanSpeed - 1;
 233   2          SleepTimerCompleteFlag_1hr = 0;
 234   2          switch(RemoteData.FanSpeed)
 235   2          {
 236   3            case 0:
 237   3              //operation
 238   3              LED_blink_Counter = 2+(3*(RemoteData.Light));
 239   3              LED_blink_Status = 1;
 240   3              fan_power_off();
C51 COMPILER V9.60.0.0   PWM                                                               12/19/2022 10:49:29 PAGE 5   

 241   3              //i2c_speed(FAN_OFF_VALUE);
 242   3              RemoteData.Power = 0;
 243   3              RemoteData.Sleep = 0;
 244   3              SleepTimerStartFlag_1hr = 0;
 245   3              SleepTimerCompleteFlag_1hr = 0;
 246   3              SleepTimerCounter_1hr = 0;
 247   3              //fanSpeed status =0 , fanSleep = 0 , fan power off
 248   3              break;
 249   3            case 1:
 250   3              //operation
 251   3              fanSpeed1();
 252   3              break;
 253   3            case 2:
 254   3              //operation
 255   3              fanSpeed2();
 256   3              break;
 257   3            case 3:
 258   3              //operation
 259   3              fanSpeed3();
 260   3              break;
 261   3            case 4:
 262   3              //operation
 263   3              fanSpeed4();
 264   3              break;
 265   3            case 5:
 266   3              //operation
 267   3              fanSpeed5();
 268   3              break;
 269   3            default:
 270   3              //operation
 271   3              //not possible
 272   3              break;
 273   3          }
 274   2        }
 275   1      }
 276          
 277          void Timer_Disable(void)
 278          {
 279   1        //Operation
 280   1        LED_blink_Counter = 2+(3*(RemoteData.Light));
 281   1        LED_blink_Status = 1;
 282   1        TimerStartFlag = 0;
 283   1        General_Counter = 0;
 284   1        TimerHrsValue = 0;
 285   1        RemoteData.Timer_Hrs = REMOTE_TIMER_OFF;
 286   1      }
 287          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1114    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
