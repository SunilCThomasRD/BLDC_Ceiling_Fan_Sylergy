C51 COMPILER V9.60.0.0   PWM                                                               01/04/2023 16:06:19 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Objects\PWM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\PWM.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\PWM.lst) TABS(2) OBJECT(.\Objects\PWM.obj)

line level    source

   1          #include  "A94B114.h"
   2          #include  "func_def.h"
   3          //#include  "MotorPara.h"
   4          
   5          extern unsigned char TimerStartFlag,SleepTimerCompleteFlag_1hr,SleepTimerStartFlag_1hr;
   6          extern unsigned int TimerHrsValue,General_Counter;
   7          extern unsigned char Command,LED_blink_Counter,LED_blink_Status;
   8          extern long SleepTimerCounter_1hr;
   9          extern struct RemoteStatus RemoteData;
  10          extern unsigned char Sleep_Data;
  11          //void i2c_speed(unsigned char);
  12          //unsigned char temp = 0;
  13          void fan_power_off(void)
  14          { 
  15   1        /*T2BDRH = 0x00;    // duty High
  16   1        T2BDRL = 0x00;    // duty Low
  17   1        T2CRH |= 0x80;    // enable counter*/
  18   1        //i2c_devicew(speedCtrl_Base_address, FAN_OFF_VALUE); 
  19   1        //I2C_Motor_Start();
  20   1        i2c_speed(FAN_OFF_VALUE);
  21   1      }
  22          
  23          void fan_power_on(void)
  24          {
  25   1        if(RemoteData.Power == 1)
  26   1        {
  27   2          LED_blink_Counter = 2+(3*(RemoteData.Light));
  28   2          LED_blink_Status = 1;
  29   2          fan_power_off();
  30   2          Sleep_Data = 7;
  31   2          //i2c_speed(FAN_OFF_VALUE);
  32   2          RemoteData.Power = 0;
  33   2          if(RemoteData.FanSpeed == 0)
  34   2          {
  35   3            RemoteData.FanSpeed = 5;
  36   3          }
  37   2          if(RemoteData.Timer_Hrs != REMOTE_TIMER_OFF)
  38   2          {
  39   3            TimerStartFlag = 0;
  40   3            General_Counter = 0;
  41   3            TimerHrsValue = 0;
  42   3            RemoteData.Timer_Hrs = REMOTE_TIMER_OFF;  
  43   3          }
  44   2          /*Sunil commanded*/
  45   2      //    if(RemoteData.Sleep)
  46   2      //    {
  47   2      //      SleepTimerStartFlag_1hr = 0;
  48   2      //      SleepTimerCompleteFlag_1hr = 0;
  49   2      //      SleepTimerCounter_1hr = 0;
  50   2      //      RemoteData.Sleep = 0;
  51   2      //    }
  52   2          //fan_power = 0;
  53   2          Command = 0;
  54   2        }
C51 COMPILER V9.60.0.0   PWM                                                               01/04/2023 16:06:19 PAGE 2   

  55   1        else
  56   1        {
  57   2          switch(RemoteData.FanSpeed)
  58   2          {
  59   3            case 0:
  60   3              //operation
  61   3              Sleep_Data = 0;
  62   3              fan_power_off();
  63   3              //i2c_speed(FAN_OFF_VALUE);
  64   3              break;
  65   3            case 1:
  66   3              //operation
  67   3              Sleep_Data = 1;
  68   3              fanSpeed1();
  69   3              break;
  70   3            case 2:
  71   3              //operation
  72   3              Sleep_Data = 2;
  73   3              fanSpeed2();
  74   3              break;
  75   3            case 3:
  76   3              //operation
  77   3              Sleep_Data = 3;
  78   3              fanSpeed3();
  79   3              break;
  80   3            case 4:
  81   3              //operation
  82   3              Sleep_Data = 4;
  83   3              fanSpeed4();
  84   3              break;
  85   3            case 5:
  86   3              //operation
  87   3              Sleep_Data = 5;
  88   3              fanSpeed5();
  89   3              break;
  90   3            case 6:
  91   3              //operation
  92   3              Sleep_Data = 6;
  93   3              fanSpeed6();
  94   3              break;
  95   3            case 7:
  96   3              //operation
  97   3              fanSpeed_BOOST();
  98   3              break;
  99   3            default:
 100   3              //operation
 101   3              //not possible
 102   3              break;
 103   3          }
 104   2          RemoteData.Power = 1;
 105   2          Command = 0;
 106   2        } 
 107   1      }
 108          
 109          void fanSpeed1(void)    // 45% duty cycle
 110          {
 111   1          LED_blink_Counter = 2+(3*(RemoteData.Light));
 112   1          LED_blink_Status = 1;
 113   1          /*T2BDRH = 0x02;    // duty High
 114   1          T2BDRL = 0x58;    // duty Low
 115   1          T2CRH = 0xB2;   // enable counter*/
 116   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED1_VALUE);
C51 COMPILER V9.60.0.0   PWM                                                               01/04/2023 16:06:19 PAGE 3   

 117   1          i2c_speed(FAN_SPEED1_VALUE);
 118   1          RemoteData.FanSpeed = 1;
 119   1          RemoteData.Power = 1;
 120   1          
 121   1      }
 122          
 123          void fanSpeed2(void)    // 55% duty cycle
 124          {
 125   1          LED_blink_Counter = 4+(3*(RemoteData.Light));
 126   1          LED_blink_Status = 1;
 127   1          /*T2BDRH = 0x02;    // duty High
 128   1          T2BDRL = 0xDE;    // duty Low
 129   1          T2CRH = 0xB2;   // enable counter*/
 130   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED2_VALUE);  
 131   1          i2c_speed(FAN_SPEED2_VALUE);
 132   1          RemoteData.FanSpeed = 2;
 133   1          RemoteData.Power = 1;
 134   1        
 135   1      }
 136          
 137          void fanSpeed3(void)    // 65% duty cycle
 138          {
 139   1          LED_blink_Counter = 6+(3*(RemoteData.Light));
 140   1          LED_blink_Status = 1;
 141   1          /*T2BDRH = 0x03;    // duty High
 142   1          T2BDRL = 0x63;    // duty Low
 143   1          T2CRH = 0xB2;   // enable counter*/
 144   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED3_VALUE);
 145   1          i2c_speed(FAN_SPEED3_VALUE);  
 146   1          RemoteData.FanSpeed = 3;
 147   1          RemoteData.Power = 1;
 148   1          
 149   1      }
 150          
 151          void fanSpeed4(void)    // 75% duty cycle
 152          {
 153   1          LED_blink_Counter = 8+(3*(RemoteData.Light));
 154   1          LED_blink_Status = 1;
 155   1          /*T2BDRH = 0x03;    // duty High
 156   1          T2BDRL = 0xE8;    // duty Low
 157   1          T2CRH = 0xB2;   // enable counter*/
 158   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED4_VALUE);
 159   1          i2c_speed(FAN_SPEED4_VALUE);
 160   1          RemoteData.FanSpeed = 4;
 161   1          RemoteData.Power = 1;
 162   1        
 163   1      }
 164          
 165          void fanSpeed5(void)    // 80% duty cycle
 166          {
 167   1          LED_blink_Counter = 10+(3*(RemoteData.Light));
 168   1          LED_blink_Status = 1;
 169   1          /*T2BDRH = 0x04;    // duty High
 170   1          T2BDRL = 0x2B;    // duty Low
 171   1          T2CRH = 0xB2;   // enable counter*/
 172   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED5_VALUE);
 173   1          i2c_speed(FAN_SPEED5_VALUE);
 174   1          RemoteData.FanSpeed = 5;
 175   1          RemoteData.Power = 1;
 176   1      }
 177          
 178          void fanSpeed6(void)
C51 COMPILER V9.60.0.0   PWM                                                               01/04/2023 16:06:19 PAGE 4   

 179          {
 180   1          LED_blink_Counter = 12+(3*(RemoteData.Light));
 181   1          LED_blink_Status = 1;
 182   1          /*T2BDRH = 0x04;    // duty High
 183   1          T2BDRL = 0x2B;    // duty Low
 184   1          T2CRH = 0xB2;   // enable counter*/
 185   1          //i2c_devicew(speedCtrl_Base_address, FAN_SPEED5_VALUE);
 186   1          i2c_speed(FAN_SPEED6_VALUE);
 187   1          RemoteData.FanSpeed = 6;
 188   1          RemoteData.Power = 1;
 189   1      }
 190          
 191          void fanSpeed_BOOST(void)   // 85% duty cycle
 192          {   
 193   1          LED_blink_Counter = 2+(3*(RemoteData.Light));
 194   1          LED_blink_Status = 1;
 195   1          /*T2BDRH = 0x04;    // duty High
 196   1          T2BDRL = 0x6D;    // duty Low
 197   1          T2CRH = 0xB2;   // enable counter*/
 198   1          //i2c_devicew(speedCtrl_Base_address, FAN_BOOST_VALUE); 
 199   1          i2c_speed(FAN_BOOST_VALUE);
 200   1          RemoteData.FanSpeed = 7;
 201   1          RemoteData.Power = 1;
 202   1      
 203   1      }
 204          
 205          void Timer_Hrs_process(unsigned char Timer)
 206          {
 207   1        if(Timer == REMOTE_TIMER_2HRS)
 208   1        {
 209   2          LED_blink_Counter = 4+(3*(RemoteData.Light));
 210   2          LED_blink_Status = 1;
 211   2          TimerStartFlag = 1;
 212   2          TimerHrsValue = 14400;
 213   2      //    TimerHrsValue = 400;  //for 5min
 214   2      //    TimerHrsValue = 128;  //for debug
 215   2        }
 216   1        else if(Timer == REMOTE_TIMER_4HRS)
 217   1        {
 218   2          LED_blink_Counter = 8+(3*(RemoteData.Light));
 219   2          LED_blink_Status = 1;
 220   2          TimerStartFlag = 1;
 221   2          TimerHrsValue = 28800;
 222   2        }
 223   1        else if(Timer == REMOTE_TIMER_6HRS)
 224   1        {
 225   2          LED_blink_Counter = 12+(3*(RemoteData.Light));
 226   2          LED_blink_Status = 1;
 227   2          TimerStartFlag = 1;
 228   2          TimerHrsValue = 43200;
 229   2        }
 230   1        else if(Timer == REMOTE_TIMER_8HRS)
 231   1        {
 232   2          LED_blink_Counter = 16+(3*(RemoteData.Light));
 233   2          LED_blink_Status = 1;
 234   2          TimerStartFlag = 1;
 235   2          TimerHrsValue = 57600;
 236   2        }
 237   1      }
 238          
 239          void SleepOperation(void)
 240          {
C51 COMPILER V9.60.0.0   PWM                                                               01/04/2023 16:06:19 PAGE 5   

 241   1        if(SleepTimerCompleteFlag_1hr)
 242   1        {
 243   2          RemoteData.FanSpeed = RemoteData.FanSpeed - 1;
 244   2          SleepTimerCompleteFlag_1hr = 0;
 245   2          switch(RemoteData.FanSpeed)
 246   2          {
 247   3            case 0:
 248   3              //operation
 249   3              LED_blink_Counter = 2+(3*(RemoteData.Light));
 250   3              LED_blink_Status = 1;
 251   3              fan_power_off();
 252   3              //i2c_speed(FAN_OFF_VALUE);
 253   3              RemoteData.Power = 0;
 254   3              RemoteData.Sleep = 0;
 255   3              SleepTimerStartFlag_1hr = 0;
 256   3              SleepTimerCompleteFlag_1hr = 0;
 257   3              SleepTimerCounter_1hr = 0;
 258   3              //fanSpeed status =0 , fanSleep = 0 , fan power off
 259   3              break;
 260   3            case 1:
 261   3              //operation
 262   3              fanSpeed1();
 263   3              break;
 264   3            case 2:
 265   3              //operation
 266   3              fanSpeed2();
 267   3              break;
 268   3            case 3:
 269   3              //operation
 270   3              fanSpeed3();
 271   3              break;
 272   3            case 4:
 273   3              //operation
 274   3              fanSpeed4();
 275   3              break;
 276   3            case 5:
 277   3              //operation
 278   3              fanSpeed5();
 279   3              break;
 280   3            default:
 281   3              //operation
 282   3              //not possible
 283   3              break;
 284   3          }
 285   2        }
 286   1      }
 287          
 288          void Timer_Disable(void)
 289          {
 290   1        //Operation
 291   1        LED_blink_Counter = 2+(3*(RemoteData.Light));
 292   1        LED_blink_Status = 1;
 293   1        TimerStartFlag = 0;
 294   1        General_Counter = 0;
 295   1        TimerHrsValue = 0;
 296   1        RemoteData.Timer_Hrs = REMOTE_TIMER_OFF;
 297   1      }
 298          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1108    ----
C51 COMPILER V9.60.0.0   PWM                                                               01/04/2023 16:06:19 PAGE 6   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
