; .\Objects\flash.SRC generated from: src\flash.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE src\flash.c LARGE OPTIMIZE(4,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\flash.lst) TABS(2) SRC(.\Objects\flash.SRC)

$NOMOD51

NAME	FLASH

I2C_INT_EN	BIT	0C0H.0
P0	DATA	080H
P1	DATA	088H
DBTSR	DATA	084H
P2	DATA	090H
AC	BIT	0D0H.6
EA	BIT	0B8H.7
WDTCR	DATA	08EH
P0DB	DATA	09EH
CMPTR	DATA	0D7H
TDISR	DATA	0D3H
P1DB	DATA	0A6H
ADC_INT_EN	BIT	0C8H.0
UART_RX_INT_EN	BIT	0C0H.1
P2DB	DATA	0AEH
TESTH	DATA	0D2H
UART_TX_INT_EN	BIT	0C0H.2
TESTL	DATA	0D1H
IE	DATA	0B8H
DPH1	DATA	083H
WDTMR	DATA	08DH
DPL1	DATA	082H
USTAT	DATA	0E4H
IOFFSET	DATA	08AH
EO	DATA	0A2H
P0OD	DATA	09DH
P1OD	DATA	0A5H
P2OD	DATA	0ADH
ADCM	DATA	095H
IP	DATA	0E8H
P0IO	DATA	09BH
P1IO	DATA	0A3H
T0CR	DATA	092H
T1CR	DATA	0BAH
P2IO	DATA	0ABH
ADCR	DATA	096H
T0DR	DATA	094H
CY	BIT	0D0H.7
T2CR	DATA	0C2H
IRQ0	DATA	0A0H
IRQ1	DATA	0A8H
IRQ2	DATA	0B0H
BIT_INT_EN	BIT	0C8H.2
FECR	DATA	0F2H
CMP_INT_EN	BIT	0B8H.0
FEDR	DATA	0EFH
SP	DATA	081H
EINT_INT_F	BIT	0A0H.4
OV	BIT	0D0H.2
I2CSAR	DATA	0FEH
T1ADRH	DATA	0BDH
P0PU	DATA	09CH
T2ADRH	DATA	0C5H
T1BDRH	DATA	0BFH
P1PU	DATA	0A4H
T1CDRH	DATA	0CDH
T2BDRH	DATA	0C7H
P2PU	DATA	0ACH
T1DDRH	DATA	0CFH
EIFLAG	DATA	0C9H
T1ADRL	DATA	0BCH
FEMR	DATA	0F1H
T2ADRL	DATA	0C4H
T1BDRL	DATA	0BEH
EIPOL0	DATA	08BH
FPCR	DATA	0ECH
SCCR	DATA	0D9H
T1CDRL	DATA	0CCH
LVI_INT_EN	BIT	0C8H.3
T2BDRL	DATA	0C6H
EIPOL1	DATA	08CH
T1DDRL	DATA	0CEH
WDT_INT_EN	BIT	0C8H.1
P00	BIT	080H.0
FESR	DATA	0F3H
I2C_INT_F	BIT	0A8H.0
EIN10_INT_F	BIT	0A0H.1
P10	BIT	088H.0
PCON	DATA	087H
P01	BIT	080H.1
FETR	DATA	0E7H
EIN11_INT_F	BIT	0A0H.2
P20	BIT	090H.0
P11	BIT	088H.1
P02	BIT	080H.2
EIN12_INT_F	BIT	0A0H.3
P21	BIT	090H.1
P12	BIT	088H.2
P03	BIT	080H.3
P22	BIT	090H.2
P13	BIT	088H.3
P04	BIT	080H.4
P0FSRH	DATA	0B4H
P23	BIT	090H.3
P14	BIT	088H.4
P05	BIT	080H.5
P1FSRH	DATA	0B6H
P15	BIT	088H.5
P06	BIT	080H.6
P07	BIT	080H.7
ILVL	DATA	09AH
P0FSRL	DATA	0B3H
P1FSRL	DATA	0B5H
ADC_INT_F	BIT	0B0H.0
UART_RX_INT_F	BIT	0A8H.1
CMPDBT	DATA	0DEH
I2CSCLHR	DATA	0FBH
UCTRL1	DATA	0E1H
UART_TX_INT_F	BIT	0A8H.2
UCTRL2	DATA	0E2H
RSFR	DATA	098H
LVIR	DATA	089H
UCTRL3	DATA	0E3H
IE1	DATA	0C0H
UCTRL4	DATA	0EBH
IE2	DATA	0C8H
I2CSCLLR	DATA	0FAH
B	DATA	0F0H
TEST	DATA	0D1H
WDTR	DATA	08EH
T0_INT_EN	BIT	0C0H.4
T1_INT_EN	BIT	0C0H.5
T2_INT_EN	BIT	0C0H.6
BITCNT	DATA	085H
ACC	DATA	0E0H
ADCM1	DATA	096H
IP1	DATA	0E9H
IP2	DATA	0EAH
P	BIT	0D0H.0
BIT_INT_F	BIT	0B0H.2
EINT10_INT_EN	BIT	0B8H.1
CMP_INT_F	BIT	0A0H.0
EINT11_INT_EN	BIT	0B8H.2
I2CDR	DATA	0FDH
RS0	BIT	0D0H.3
EINT12_INT_EN	BIT	0B8H.3
SYSCON_AR	DATA	08FH
RS1	BIT	0D0H.4
I2CSAR1	DATA	0FFH
DPH	DATA	083H
T1ADR	DATA	0BCH
I2CMR	DATA	0F9H
T2ADR	DATA	0C4H
T1BDR	DATA	0BEH
LVI_INT_F	BIT	0B0H.3
T0CDR	DATA	094H
T1CDR	DATA	0CCH
T2BDR	DATA	0C6H
T1DDR	DATA	0CEH
DPL	DATA	082H
WDT_INT_F	BIT	0B0H.1
T1CRH	DATA	0BBH
ADCRH	DATA	097H
I2CSR	DATA	0F8H
T2CRH	DATA	0C3H
FEARH	DATA	0F7H
T1CRL	DATA	0BAH
ADCRL	DATA	096H
T2CRL	DATA	0C2H
CMX	DATA	0B2H
DMY_REFA	DATA	0D4H
T0CNT	DATA	093H
FEARL	DATA	0F5H
DMY_REFB	DATA	0D5H
DPTR0	DATA	082H
FEARM	DATA	0F6H
P0FSR	DATA	0B3H
DPTR1	DATA	082H
P1FSR	DATA	0B5H
P2FSR	DATA	0B7H
UDATA	DATA	0E6H
I2CSDHR	DATA	0FCH
EINT_INT_EN	BIT	0B8H.4
UBAUD	DATA	0E5H
FETCR	DATA	0F4H
XBANK	DATA	0DFH
F0	BIT	0D0H.5
LDOCR	DATA	0AAH
BITCR	DATA	086H
CMPCR	DATA	0D6H
F1	BIT	0D0H.1
T0_INT_F	BIT	0A8H.4
T1_INT_F	BIT	0A8H.5
T2_INT_F	BIT	0A8H.6
PSW	DATA	0D0H
OSCCR	DATA	0D8H
?PR?write_page_buffer_src?FLASH          SEGMENT CODE 
?PR?do_flash_at_sram_src?FLASH           SEGMENT CODE 
?PR?Flash_Enter?FLASH                    SEGMENT CODE 
?PR?Flash_Exit?FLASH SEGMENT CODE 
?PR?_write_page_buffer?FLASH             SEGMENT CODE 
?XD?_write_page_buffer?FLASH             SEGMENT XDATA OVERLAYABLE 
?PR?do_flash_at_sram?FLASH               SEGMENT CODE 
?XD?do_flash_at_sram?FLASH               SEGMENT XDATA OVERLAYABLE 
?PR?_Flash_Erase?FLASH                   SEGMENT CODE 
?XD?_Flash_Erase?FLASH                   SEGMENT XDATA OVERLAYABLE 
?PR?_Flash_Write?FLASH                   SEGMENT CODE 
?XD?_Flash_Write?FLASH                   SEGMENT XDATA OVERLAYABLE 
?PR?_Flash_Read?FLASH                    SEGMENT CODE 
?XD?_Flash_Read?FLASH                    SEGMENT XDATA OVERLAYABLE 
?DT?FLASH            SEGMENT DATA 
	EXTRN	CODE (?C?CLDPTR)
	EXTRN	CODE (?C?CSTPTR)
	PUBLIC	g_FEMR
	PUBLIC	g_FECR
	PUBLIC	g_WDTMR
	PUBLIC	g_IE
	PUBLIC	code_buf
	PUBLIC	g_IE2
	PUBLIC	g_IE1
	PUBLIC	?_Flash_Read?BYTE
	PUBLIC	_Flash_Read
	PUBLIC	_Flash_Write
	PUBLIC	_Flash_Erase
	PUBLIC	do_flash_at_sram
	PUBLIC	_write_page_buffer
	PUBLIC	Flash_Exit
	PUBLIC	Flash_Enter
	PUBLIC	do_flash_at_sram_src
	PUBLIC	write_page_buffer_src

	DSEG  AT  030H
       code_buf:   DS   20

	RSEG  ?XD?_write_page_buffer?FLASH
?_write_page_buffer?BYTE:
       temp?441:   DS   3

	RSEG  ?XD?do_flash_at_sram?FLASH
?do_flash_at_sram?BYTE:
       temp?543:   DS   1

	RSEG  ?XD?_Flash_Erase?FLASH
?_Flash_Erase?BYTE:
       addr?645:   DS   2

	RSEG  ?XD?_Flash_Read?FLASH
?_Flash_Read?BYTE:
       addr?853:   DS   2
         dt?854:   DS   3
	ORG  5
     length?855:   DS   1
	ORG  6
          i?856:   DS   2

	RSEG  ?XD?_Flash_Write?FLASH
?_Flash_Write?BYTE:
       addr?748:   DS   2
	ORG  2
         dt?749:   DS   3
	ORG  5
          i?750:   DS   2
	ORG  7
flash_state_id?752:   DS   1

	RSEG  ?DT?FLASH
          g_IE1:   DS   1
          g_IE2:   DS   1
           g_IE:   DS   1
        g_WDTMR:   DS   1
         g_FECR:   DS   1
         g_FEMR:   DS   1
; #define FLASH_GLOBALS
; 
; #define		MyDef	extern
; 
; 
; #include	"A94B114.h"
; #include "flash.h"
; #include	"func_def.h"
; 
; #define PGM_TIME 0x9D	// 2.5ms
; #define NOP _nop_()
; 
; #define PAGEBUF_SIZE 32
; #define coderom ((unsigned char volatile code  *) 0)
; #define DUMMY_FLASH_ADDRESS	0x600			// Set a dummy write area within the protection zone.
; 
; #define	FLASH_WRITE_SECURITY_ID		0xF0
; #define	FLASH_ERASE_SECURITY_ID		0xE0
; 
; // Do not change this define.
; // code_buf, g_FEMR, g_FECR, g_WDTMR must be data area. (Do not define at xdata area or idata.)
; volatile unsigned char data code_buf[20] _at_ 0x30;		// Lower 128bytes internal RAM. (GPR Address 0x30~0x7F)
; volatile unsigned char data g_FEMR, g_FECR, g_WDTMR;
; volatile unsigned char data g_IE, g_IE1, g_IE2;
; //==============================================================================
; // Sram-jump Program Routine.
; //==============================================================================
; // must execute in SRAM!, 0 ~ 0x11(code size : 18 byte)
; // Do not change this routine.
; volatile void write_page_buffer_src()		

	RSEG  ?PR?write_page_buffer_src?FLASH
write_page_buffer_src:
	USING	0
			; SOURCE LINE # 30
; {
			; SOURCE LINE # 31
;     FEMR = FLASH_SEL                |   // FSEL (Select Flash memory)
			; SOURCE LINE # 32
	MOV  	FEMR,#089H
;            FLASH_PBUFF_SEL          |   // PBUFF (Select page buffer)
;            FLASH_CON_ENABLE         ;   // FEEN (Enable program & erase)
; 
; 	#pragma asm
; 		mov		r0,#32
	  mov		r0,#32
; 		mov		dptr,#0x10E0	; page buffer address
	  mov		dptr,#0x10E0	; page buffer address
;     write_page_buffer_src_loop:
	  write_page_buffer_src_loop:
; 		mov		a, @r1
	  mov		a, @r1
; 		movx	@dptr,a
	  movx	@dptr,a
; 		inc		r1
	  inc		r1
; 		inc		dptr        
	  inc		dptr        
; 		djnz	r0,write_page_buffer_src_loop
	  djnz	r0,write_page_buffer_src_loop
; 	#pragma endasm
; 
;     FEMR = 0;
			; SOURCE LINE # 47
	CLR  	A
	MOV  	FEMR,A
; }
			; SOURCE LINE # 48
	RET  	
; END OF write_page_buffer_src

; 
; // must execute in SRAM!, 0 ~ 0x0E(code size : 15 byte)
; // Do not change this routine.
; volatile void do_flash_at_sram_src()		

	RSEG  ?PR?do_flash_at_sram_src?FLASH
do_flash_at_sram_src:
	USING	0
			; SOURCE LINE # 52
; {
			; SOURCE LINE # 53
; 	#pragma	asm
; 		mov	FEMR,g_FEMR				// 3 byte
	  mov	FEMR,g_FEMR				 
; 		mov	FECR,g_FECR				// 3 byte
	  mov	FECR,g_FECR				 
; 	_flash_busy_wait:
	  _flash_busy_wait:
; 		mov	A,FESR					// 2 byte
	  mov	A,FESR					 
; 		JNB	ACC.7,_flash_busy_wait	// 3 byte
	  JNB	ACC.7,_flash_busy_wait	 
; 		clr	A						// 1 byte
	  clr	A						 
; 		mov	FEMR,A					// 2 byte
	  mov	FEMR,A					 
; 	#pragma endasm
; // C source
; //     FEMR = g_FEMR;
; //     FECR = g_FECR;
; //     while( !(FESR & 0x80) );
; //     FEMR = 0;
; }	// RET // 1byte
			; SOURCE LINE # 68
	RET  	
; END OF do_flash_at_sram_src

; //==============================================================================
; void Flash_Enter()

	RSEG  ?PR?Flash_Enter?FLASH
Flash_Enter:
			; SOURCE LINE # 70
; {
			; SOURCE LINE # 71
; 	cli();				// Global Interrupt Disable
			; SOURCE LINE # 72
	CLR  	EA
; 	g_IE = IE;
			; SOURCE LINE # 73
	MOV  	g_IE,IE
; 	g_IE1 = IE1;
			; SOURCE LINE # 74
	MOV  	g_IE1,IE1
; 	g_IE2 = IE2; 
			; SOURCE LINE # 75
	MOV  	g_IE2,IE2
; 	g_WDTMR = WDTMR;	// Backup WDTMR
			; SOURCE LINE # 76
	MOV  	g_WDTMR,WDTMR
; 	WDTMR	= 0;		// Watch Dog Timer Stop.
			; SOURCE LINE # 77
	CLR  	A
	MOV  	WDTMR,A
; 	g_WDTMR |= 0x04;	// Clear WDT Counter
			; SOURCE LINE # 78
	ORL  	g_WDTMR,#04H
; 	
; 	// To access Flash Control register, ENTRY_0~2 should be set 0xAA, 0x55, 0xA5.
; 	*(unsigned char xdata *)0x10D8 = 0xAA;
			; SOURCE LINE # 81
	MOV  	DPTR,#010D8H
	MOV  	A,#0AAH
	MOVX 	@DPTR,A
;     *(unsigned char xdata *)0x10DA = 0x55;
			; SOURCE LINE # 82
	MOV  	DPTR,#010DAH
	MOV  	A,#055H
	MOVX 	@DPTR,A
;     *(unsigned char xdata *)0x10DD = 0xA5;
			; SOURCE LINE # 83
	MOV  	DPTR,#010DDH
	MOV  	A,#0A5H
	MOVX 	@DPTR,A
; 	
; 	FEARL = (unsigned char)( DUMMY_FLASH_ADDRESS & 0xff);
			; SOURCE LINE # 85
	CLR  	A
	MOV  	FEARL,A
; 	FEARM = (unsigned char)(( DUMMY_FLASH_ADDRESS >> 8) & 0xff);
			; SOURCE LINE # 86
	MOV  	FEARM,#06H
; 	FEARH = 0;
			; SOURCE LINE # 87
	MOV  	FEARH,A
; 	
; }
			; SOURCE LINE # 89
	RET  	
; END OF Flash_Enter

; 
; void Flash_Exit()

	RSEG  ?PR?Flash_Exit?FLASH
Flash_Exit:
	USING	0
			; SOURCE LINE # 91
; {
			; SOURCE LINE # 92
; 	FECR = FLASH_MODE_EXIT;
			; SOURCE LINE # 93
	MOV  	FECR,#033H
; 	
; 	FEARL = (unsigned char)( DUMMY_FLASH_ADDRESS & 0xff);
			; SOURCE LINE # 95
	CLR  	A
	MOV  	FEARL,A
; 	FEARM = (unsigned char)(( DUMMY_FLASH_ADDRESS >> 8) & 0xff);
			; SOURCE LINE # 96
	MOV  	FEARM,#06H
; 	FEARH = 0;
			; SOURCE LINE # 97
	MOV  	FEARH,A
; 	
; 	// After to change Flash Control register, ENTRY_0~2 should be set 0x00.
; 	*(unsigned char xdata *)0x10D8 = 0x00;
			; SOURCE LINE # 100
	MOV  	DPTR,#010D8H
	MOVX 	@DPTR,A
;     *(unsigned char xdata *)0x10DA = 0x00;
			; SOURCE LINE # 101
	MOV  	DPTR,#010DAH
	MOVX 	@DPTR,A
;     *(unsigned char xdata *)0x10DD = 0x00;
			; SOURCE LINE # 102
	MOV  	DPTR,#010DDH
	MOVX 	@DPTR,A
; 	
; 	// Flash code buffer ram clear.
; #pragma asm
; 	mov		r0, #code_buf
	  mov		r0, #code_buf
; 	mov		r2, #20
	  mov		r2, #20
; 	clr		a
	  clr		a
; loop0:
	  loop0:
; 	mov		@r0, a
	  mov		@r0, a
; 	inc		r0
	  inc		r0
; 	djnz	r2, loop0
	  djnz	r2, loop0
; #pragma endasm
; 
; 	WDTMR	= g_WDTMR;	// Restore WDTMR
			; SOURCE LINE # 115
	MOV  	WDTMR,g_WDTMR
; 	 IE = g_IE;
			; SOURCE LINE # 116
	MOV  	IE,g_IE
; 	IE1 = g_IE1;
			; SOURCE LINE # 117
	MOV  	IE1,g_IE1
; 	IE2 = g_IE2; 
			; SOURCE LINE # 118
	MOV  	IE2,g_IE2
; 	sei();				// Global Interrupt Enable
			; SOURCE LINE # 119
	SETB 	EA
; }
			; SOURCE LINE # 120
	RET  	
; END OF Flash_Exit

; 
; 
; void write_page_buffer(unsigned char *dt)	// dt -> r3, r2, r1	

	RSEG  ?PR?_write_page_buffer?FLASH
_write_page_buffer:
	USING	0
			; SOURCE LINE # 123
;---- Variable 'dt?440' assigned to Register 'R1/R2/R3' ----
; {
			; SOURCE LINE # 124
; 	unsigned char *temp = dt;
			; SOURCE LINE # 125
	MOV  	DPTR,#temp?441
	MOV  	A,R3
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R1
	MOVX 	@DPTR,A
; 	
;     #pragma asm
; 		mov		dptr,#write_page_buffer_src
	  mov		dptr,#write_page_buffer_src
; 		mov		r0,#0x30
	  mov		r0,#0x30
;         mov		r2,#0x12
	  mov		r2,#0x12
; 	write_page_buffer_loop:
	  write_page_buffer_loop:
; 		clr		a
	  clr		a
; 		movc	a,@a+dptr
	  movc	a,@a+dptr
; 		mov		@r0,a
	  mov		@r0,a
; 		inc		dptr
	  inc		dptr
; 		inc		r0
	  inc		r0
; 		djnz	r2,write_page_buffer_loop
	  djnz	r2,write_page_buffer_loop
;         ljmp	0x8030		; jump sram region
	  ljmp	0x8030		; jump sram region
;     #pragma endasm
; }
			; SOURCE LINE # 140
	RET  	
; END OF _write_page_buffer

; 
; #if 0
; void do_flash_at_sram()
; {
;     #pragma asm
; 		mov		dptr,#do_flash_at_sram_src
; 		mov		r0,#0x30
; 		mov		r1,#0x0F
; 	do_flash_at_sram_loop:
; 		clr		a
; 		movc	a,@a+dptr
; 		mov		@r0,a
; 		inc		dptr
; 		inc		r0
; 		djnz	r1,do_flash_at_sram_loop
; 		ljmp	0x8030
;     #pragma endasm
; }
; #else
; void do_flash_at_sram()

	RSEG  ?PR?do_flash_at_sram?FLASH
do_flash_at_sram:
	USING	0
			; SOURCE LINE # 160
; {
			; SOURCE LINE # 161
; 	unsigned char code *ptr;		//need to add "code"
; 	unsigned char temp=0, i;
			; SOURCE LINE # 163
	CLR  	A
	MOV  	DPTR,#temp?543
	MOVX 	@DPTR,A
; 
; 	ptr=(unsigned char code*)do_flash_at_sram_src;
			; SOURCE LINE # 165
	MOV  	R6,#HIGH (do_flash_at_sram_src)
	MOV  	R7,#LOW (do_flash_at_sram_src)
;---- Variable 'ptr?542' assigned to Register 'R6/R7' ----
; 	//temp=sizeof(int);
; 	for(i=0; i<15;i++)	//**size of "do_flash_at_sram_src" is less than 32.
			; SOURCE LINE # 167
;---- Variable 'i?544' assigned to Register 'R5' ----
	MOV  	R5,A
?C0006:
	MOV  	A,R5
	CLR  	C
	SUBB 	A,#0FH
	MOV  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0007
; 	{
			; SOURCE LINE # 168
; 		code_buf[i]=ptr[i];
			; SOURCE LINE # 169
	MOV  	A,R7
	ADD  	A,R5
	MOV  	DPL,A
	CLR  	A
	ADDC 	A,R6
	MOV  	DPH,A
	CLR  	A
	MOVC 	A,@A+DPTR
	MOV  	R4,A
	MOV  	A,#LOW (code_buf)
	ADD  	A,R5
	MOV  	R0,A
	MOV  	@R0,AR4
; 	}
			; SOURCE LINE # 170
	INC  	R5
	SJMP 	?C0006
?C0007:
; //	ljmp_code_buf();		//Jump 0x8030
; 	#pragma asm
; 		ljmp	0x8030		;FLASH Writing Start
	  ljmp	0x8030		;FLASH Writing Start
; 	#pragma endasm
; 	
; }
			; SOURCE LINE # 176
	RET  	
; END OF do_flash_at_sram

; #endif
; char Flash_Erase(unsigned int addr)

	RSEG  ?PR?_Flash_Erase?FLASH
_Flash_Erase:
	USING	0
			; SOURCE LINE # 178
	MOV  	DPTR,#addr?645
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
; {
			; SOURCE LINE # 179
; 	unsigned int i;
; 	unsigned char flash_state_id = FLASH_ERASE_SECURITY_ID;
			; SOURCE LINE # 181
;---- Variable 'flash_state_id?647' assigned to Register 'R5' ----
	MOV  	R5,#0E0H
; 	
; 	// Flash Flash Control Register CLR change before initialization.
; 	FECR	= 0;
			; SOURCE LINE # 184
	CLR  	A
	MOV  	FECR,A
; 	FETCR	= 0;
			; SOURCE LINE # 185
	MOV  	FETCR,A
; 	FEMR	= 0; 
			; SOURCE LINE # 186
	MOV  	FEMR,A
; 	
; 	// Enable program mode
; 	Flash_Enter();
			; SOURCE LINE # 189
	LCALL	Flash_Enter
; 
; 	FETCR = PGM_TIME;				// 0x9D = 157 : (157+1) * 2 (31.25ns * 256) = 2.528ms
			; SOURCE LINE # 191
	MOV  	FETCR,#09DH
; 	FECR = FLASH_PBUFF_RESET;
			; SOURCE LINE # 192
	MOV  	FECR,#02H
; 
; 	g_FEMR = FLASH_SEL				|
			; SOURCE LINE # 194
	MOV  	g_FEMR,#091H
; 		   FLASH_ERASE_MODE 		|
; 		   FLASH_CON_ENABLE 		;
; 
; 	g_FECR = FLASH_START_ERASE_PGM	;
			; SOURCE LINE # 198
	MOV  	g_FECR,#0BH
; 	
; 	FEARL = (unsigned char)(addr&0xff);
			; SOURCE LINE # 200
	MOV  	DPTR,#addr?645
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	FEARL,A
; 	FEARM = (unsigned char)((addr>>8)&0xff);
			; SOURCE LINE # 201
	MOV  	DPTR,#addr?645
	MOVX 	A,@DPTR
	MOV  	FEARM,A
; 	FEARH = 0;
			; SOURCE LINE # 202
	CLR  	A
	MOV  	FEARH,A
; 	
; 	if(flash_state_id != FLASH_ERASE_SECURITY_ID)
			; SOURCE LINE # 204
	MOV  	A,#0E0H
	XRL  	A,#0E0H
	JZ   	?C0010
; 	{
			; SOURCE LINE # 205
; 		Flash_Exit();
			; SOURCE LINE # 206
	LCALL	Flash_Exit
; 		WDTMR = 0;			// If Flash ID fail, may be WDTMR value error.
			; SOURCE LINE # 207
	CLR  	A
	MOV  	WDTMR,A
; 		
; 		return -1;
			; SOURCE LINE # 209
	MOV  	R7,#0FFH
	RET  	
; 	}
			; SOURCE LINE # 210
?C0010:
; 	
; 	do_flash_at_sram();
			; SOURCE LINE # 212
	LCALL	do_flash_at_sram
;  
; 	Flash_Exit();
			; SOURCE LINE # 214
	LCALL	Flash_Exit
; 	
; 	// read data  
; 	for(i=0; i<PAGEBUF_SIZE;i++){	// Read flash data.
			; SOURCE LINE # 217
;---- Variable 'i?646' assigned to Register 'R4/R5' ----
	CLR  	A
	MOV  	R5,A
	MOV  	R4,A
?C0012:
	CLR  	C
	MOV  	A,R5
	SUBB 	A,#020H
	MOV  	A,R4
	SUBB 	A,#00H
	JNC  	?C0013
; 		if(coderom[addr] != 0x00) 
			; SOURCE LINE # 218
	MOV  	DPTR,#addr?645
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPL,A
	MOV  	DPH,R6
	CLR  	A
	MOVC 	A,@A+DPTR
	JZ   	?C0015
;       		return -1;
			; SOURCE LINE # 219
	MOV  	R7,#0FFH
	RET  	
?C0015:
; 
; 		addr++;
			; SOURCE LINE # 221
	MOV  	DPTR,#addr?645+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0026
	MOV  	DPTR,#addr?645
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0026:
; 	}
			; SOURCE LINE # 222
	INC  	R5
	MOV  	A,R5
	JNZ  	?C0027
	INC  	R4
?C0027:
	SJMP 	?C0012
?C0013:
; 	return 0;
			; SOURCE LINE # 223
	MOV  	R7,#00H
; }
			; SOURCE LINE # 224
?C0011:
	RET  	
; END OF _Flash_Erase

; 
; char Flash_Write(unsigned int addr, unsigned char *dt)

	RSEG  ?PR?_Flash_Write?FLASH
_Flash_Write:
	USING	0
			; SOURCE LINE # 226
	MOV  	DPTR,#addr?748
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R3
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R2
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R1
	MOVX 	@DPTR,A
; {
			; SOURCE LINE # 227
; 	unsigned int i;
; 	unsigned char *pdt;
; 	unsigned char flash_state_id = FLASH_WRITE_SECURITY_ID;
			; SOURCE LINE # 230
	MOV  	DPTR,#flash_state_id?752
	MOV  	A,#0F0H
	MOVX 	@DPTR,A
; 	
; 	// Enable program mode
; 	Flash_Enter();
			; SOURCE LINE # 233
	LCALL	Flash_Enter
; 	
; 	FETCR = PGM_TIME;				// 0x9D = 157 : (157+1) * 2 (31.25ns * 256) = 2.528ms
			; SOURCE LINE # 235
	MOV  	FETCR,#09DH
; 
;     // 0x81
;     FEMR = FLASH_SEL                | // FSEL (Select Flash memory)
			; SOURCE LINE # 238
	MOV  	FEMR,#081H
;            FLASH_CON_ENABLE         ; // FEEN (Enable program & erase of Flash)
; 
;     // 
;     FECR = FLASH_PBUFF_RESET        ; // PBRSTB (Reset page buffer)
			; SOURCE LINE # 242
	MOV  	FECR,#02H
; 
; 	FEARL = (unsigned char)(addr&0xff);
			; SOURCE LINE # 244
	MOV  	DPTR,#addr?748
	MOVX 	A,@DPTR
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	FEARL,A
; 	FEARM = (unsigned char)((addr>>8)&0xff);
			; SOURCE LINE # 245
	MOV  	DPTR,#addr?748
	MOVX 	A,@DPTR
	MOV  	FEARM,A
; 	FEARH = 0x00;
			; SOURCE LINE # 246
	CLR  	A
	MOV  	FEARH,A
; 
;     write_page_buffer(dt);
			; SOURCE LINE # 248
	MOV  	DPTR,#dt?749
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
	LCALL	_write_page_buffer
; 
;    // 0xA1
;     g_FEMR = FLASH_SEL         |		// FSEL (Select Flash memory)
			; SOURCE LINE # 251
	MOV  	g_FEMR,#0A1H
;              FLASH_PGM_MODE    |		// PGM (Enable program or verify mode with VFY)
;              FLASH_CON_ENABLE;			// FEEN (Enable program & erase of Flash)
; 
;     // 0x0B
;     g_FECR = FLASH_START_ERASE_PGM;		// WRITE (Start program or erase)
			; SOURCE LINE # 256
	MOV  	g_FECR,#0BH
; 										// FERSTB (Reset Flash and EEPROM)
; 										// PBRSTB (Reset page buffer)
; 	
; 	if(flash_state_id != FLASH_WRITE_SECURITY_ID)
			; SOURCE LINE # 260
	MOV  	DPTR,#flash_state_id?752
	MOVX 	A,@DPTR
	XRL  	A,#0F0H
	JZ   	?C0016
; 	{
			; SOURCE LINE # 261
; 		Flash_Exit();
			; SOURCE LINE # 262
	LCALL	Flash_Exit
; 		WDTMR = 0;						// If Flash ID fail, may be WDTMR value error.
			; SOURCE LINE # 263
	CLR  	A
	MOV  	WDTMR,A
; 		
; 		return -1;
			; SOURCE LINE # 265
	MOV  	R7,#0FFH
	RET  	
; 	}
			; SOURCE LINE # 266
?C0016:
; 	
;     do_flash_at_sram();
			; SOURCE LINE # 268
	LCALL	do_flash_at_sram
;  
; 	Flash_Exit();
			; SOURCE LINE # 270
	LCALL	Flash_Exit
; 	
; 	// read data
; 	pdt = dt;
			; SOURCE LINE # 273
	MOV  	DPTR,#dt?749
	MOVX 	A,@DPTR
	MOV  	R3,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R2,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R1,A
;---- Variable 'pdt?751' assigned to Register 'R1/R2/R3' ----
; 	for(i=0;i<PAGEBUF_SIZE;i++)		// Read flash data.
			; SOURCE LINE # 274
	CLR  	A
	INC  	DPTR
	MOVX 	@DPTR,A
	INC  	DPTR
	MOVX 	@DPTR,A
?C0018:
	CLR  	C
	MOV  	DPTR,#i?750+01H
	MOVX 	A,@DPTR
	SUBB 	A,#020H
	MOV  	DPTR,#i?750
	MOVX 	A,@DPTR
	SUBB 	A,#00H
	JNC  	?C0019
; 	{	
			; SOURCE LINE # 275
; 		if (coderom[addr]!=*pdt) 
			; SOURCE LINE # 276
	LCALL	?C?CLDPTR
	MOV  	R7,A
	MOV  	DPTR,#addr?748
	MOVX 	A,@DPTR
	MOV  	R4,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPL,A
	MOV  	DPH,R4
	CLR  	A
	MOVC 	A,@A+DPTR
	XRL  	A,R7
	JZ   	?C0021
; 	  		return -2;
			; SOURCE LINE # 277
	MOV  	R7,#0FEH
	RET  	
?C0021:
; 		
; 		addr++;
			; SOURCE LINE # 279
	MOV  	DPTR,#addr?748+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0028
	MOV  	DPTR,#addr?748
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0028:
; 		pdt++;
			; SOURCE LINE # 280
	MOV  	A,#01H
	ADD  	A,R1
	MOV  	R1,A
	CLR  	A
	ADDC 	A,R2
	MOV  	R2,A
; 	}
			; SOURCE LINE # 281
	MOV  	DPTR,#i?750+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0029
	MOV  	DPTR,#i?750
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0029:
	SJMP 	?C0018
?C0019:
; 	
; 	return 0;
			; SOURCE LINE # 283
	MOV  	R7,#00H
; }
			; SOURCE LINE # 284
?C0017:
	RET  	
; END OF _Flash_Write

; 
; char Flash_Read(unsigned int addr, unsigned char *dt, unsigned char length)

	RSEG  ?PR?_Flash_Read?FLASH
_Flash_Read:
	USING	0
			; SOURCE LINE # 286
	MOV  	DPTR,#addr?853
	MOV  	A,R6
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
;---- Variable 'dt?854' assigned to Register 'R1/R2/R3' ----
; {
			; SOURCE LINE # 287
; 	unsigned int i;
; 	unsigned char *pdt;
; 	
; 	// read data
; 	pdt = dt;
			; SOURCE LINE # 292
;---- Variable 'pdt?857' assigned to Register 'R1/R2/R3' ----
; 	for(i=addr; i<(addr+length); i++)	// Read flash data.
			; SOURCE LINE # 293
	MOV  	DPTR,#addr?853
	MOVX 	A,@DPTR
	MOV  	R7,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPTR,#i?856
	XCH  	A,R7
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,R7
	MOVX 	@DPTR,A
?C0022:
	MOV  	DPTR,#length?855
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	DPTR,#addr?853+01H
	MOVX 	A,@DPTR
	ADD  	A,R7
	MOV  	R7,A
	MOV  	DPTR,#addr?853
	MOVX 	A,@DPTR
	ADDC 	A,#00H
	MOV  	R6,A
	CLR  	C
	MOV  	DPTR,#i?856+01H
	MOVX 	A,@DPTR
	SUBB 	A,R7
	MOV  	DPTR,#i?856
	MOVX 	A,@DPTR
	SUBB 	A,R6
	JNC  	?C0023
; 	{
			; SOURCE LINE # 294
; 		*pdt = coderom[i];
			; SOURCE LINE # 295
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	DPL,A
	MOV  	DPH,R6
	CLR  	A
	MOVC 	A,@A+DPTR
	LCALL	?C?CSTPTR
; 		pdt++;
			; SOURCE LINE # 296
	MOV  	A,#01H
	ADD  	A,R1
	MOV  	R1,A
	CLR  	A
	ADDC 	A,R2
	MOV  	R2,A
; 	}
			; SOURCE LINE # 297
	MOV  	DPTR,#i?856+01H
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
	JNZ  	?C0030
	MOV  	DPTR,#i?856
	MOVX 	A,@DPTR
	INC  	A
	MOVX 	@DPTR,A
?C0030:
	SJMP 	?C0022
?C0023:
; 	
; 	return 0;
			; SOURCE LINE # 299
	MOV  	R7,#00H
; }
			; SOURCE LINE # 300
	RET  	
; END OF _Flash_Read

	END
